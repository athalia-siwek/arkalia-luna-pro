#!/usr/bin/env python3

"""
üß† modules/zeroia/core.py
ZeroIA Core - Point d'entr√©e principal du syst√®me de raisonnement

Module core simplifi√© qui d√©l√®gue aux composants enhanced sp√©cialis√©s.
"""

import logging
import os
import time
from pathlib import Path
from typing import Dict, Optional, Tuple

from .reason_loop_enhanced import (
    get_circuit_status,
    get_error_recovery_status,
    initialize_components_with_recovery,
    reason_loop_enhanced_with_recovery,
)

logger = logging.getLogger(__name__)


class ZeroIACore:
    """
    Classe principale ZeroIA - Interface simplifi√©e pour le syst√®me complet
    """

    def __init__(self):
        """Initialise le core ZeroIA"""
        self.initialized = False
        self.components = None

    def initialize(self) -> bool:
        """
        Initialise tous les composants ZeroIA

        Returns:
            bool: True si succ√®s, False sinon
        """
        try:
            # Add startup delay to ensure dependencies are ready
            startup_delay = int(os.getenv("ZEROIA_STARTUP_DELAY", "15"))
            logger.info(f"‚è≥ Waiting {startup_delay}s for system stabilization...")
            time.sleep(startup_delay)

            # Initialize with recovery mechanism
            retry_count = 0
            max_retries = int(os.getenv("ZEROIA_MAX_RETRIES", "5"))

            while retry_count < max_retries:
                try:
                    logger.info(f"üîÑ Initialization attempt {retry_count + 1}/{max_retries}")
                    self.components = initialize_components_with_recovery()
                    self.initialized = True
                    logger.info("üöÄ ZeroIA Core initialis√© avec succ√®s")
                    return True
                except Exception as e:
                    retry_count += 1
                    if retry_count >= max_retries:
                        logger.error(f"‚ùå √âchec initialisation apr√®s {max_retries} tentatives: {e}")
                        return False
                    logger.warning(f"‚ö†Ô∏è Tentative {retry_count} √©chou√©e: {e}")
                    time.sleep(min(5 * retry_count, 30))  # Exponential backoff

            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur critique initialisation ZeroIA Core: {e}")
            return False

    def run_decision_cycle(self, context_path: Path | None = None) -> tuple[str, float]:
        """
        Ex√©cute un cycle de d√©cision complet

        Args:
            context_path: Chemin vers le contexte (optionnel)

        Returns:
            Tuple[str, float]: (d√©cision, score_confiance)
        """
        if not self.initialized:
            logger.warning("‚ö†Ô∏è ZeroIA Core non initialis√©")
            return "error", 0.0

        try:
            return reason_loop_enhanced_with_recovery(context_path=context_path)
        except Exception as e:
            logger.error(f"‚ùå Erreur cycle de d√©cision: {e}")
            return "error", 0.0

    def get_status(self) -> dict:
        """
        Retourne l'√©tat complet du syst√®me ZeroIA

        Returns:
            Dict: √âtat d√©taill√© du syst√®me
        """
        if not self.initialized:
            return {
                "status": "not_initialized",
                "initialized": False,
                "error": "ZeroIA Core non initialis√©",
            }

        try:
            circuit_status = get_circuit_status()
            recovery_status = get_error_recovery_status()

            return {
                "status": "operational",
                "initialized": True,
                "circuit_breaker": circuit_status,
                "error_recovery": recovery_status,
                "version": "3.0.0-enhanced",
            }
        except Exception as e:
            return {"status": "error", "initialized": self.initialized, "error": str(e)}


# Instance globale (singleton pattern simple)
_zeroia_core_instance: ZeroIACore | None = None


def get_zeroia_core() -> ZeroIACore:
    """
    Retourne l'instance singleton de ZeroIA Core

    Returns:
        ZeroIACore: Instance du core
    """
    global _zeroia_core_instance

    if _zeroia_core_instance is None:
        _zeroia_core_instance = ZeroIACore()

    return _zeroia_core_instance


def quick_decision(context_path: Path | None = None) -> tuple[str, float]:
    """
    Interface rapide pour une d√©cision ZeroIA

    Args:
        context_path: Chemin vers le contexte (optionnel)

    Returns:
        Tuple[str, float]: (d√©cision, score_confiance)
    """
    core = get_zeroia_core()

    if not core.initialized:
        core.initialize()

    return core.run_decision_cycle(context_path)


def health_check() -> dict:
    """
    V√©rifie l'√©tat de sant√© du core ZeroIA

    Returns:
        Dict: √âtat de sant√© d√©taill√©
    """
    try:
        core = get_zeroia_core()
        return core.get_status()
    except Exception as e:
        return {"status": "critical_error", "error": str(e), "initialized": False}


if __name__ == "__main__":
    # Test rapide du core
    print("üß† ZeroIA Core - Test de d√©marrage")

    core = get_zeroia_core()

    if core.initialize():
        print("‚úÖ Initialisation r√©ussie")

        decision, confidence = core.run_decision_cycle()
        print(f"üéØ D√©cision: {decision} (confiance: {confidence:.2f})")

        status = core.get_status()
        print(f"üìä √âtat: {status['status']}")
    else:
        print("‚ùå √âchec initialisation")
