#!/usr/bin/env python3
# üîÑ modules/zeroia/reason_loop_enhanced.py
# Version am√©lior√©e avec Circuit Breaker et Event Sourcing

"""
Reason Loop Enhanced pour ZeroIA - Version Enterprise

Am√©liorations v3.x :
- Circuit Breaker pour protection cascade failures
- Event Sourcing complet des d√©cisions
- Gestion d'erreurs avanc√©e avec types sp√©cialis√©s
- M√©triques d√©taill√©es et monitoring
- Recovery automatique et graceful degradation
"""

import logging
import sys
import textwrap
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Optional

import toml

from modules.zeroia.adaptive_thresholds import should_lower_cpu_threshold
from modules.zeroia.circuit_breaker import (  # noqa: F401
    CircuitBreaker,
    CognitiveOverloadError,
    DecisionIntegrityError,
    SystemRebootRequired,
)
from modules.zeroia.error_recovery_system import ErrorRecoverySystem  # noqa: F401
from modules.zeroia.event_store import Event, EventStore, EventType  # noqa: F401
from modules.zeroia.graceful_degradation import GracefulDegradationSystem
from modules.zeroia.utils.backup import save_backup
from modules.zeroia.utils.state_writer import save_json_if_changed, save_toml_if_changed

# === Chemins par d√©faut ===
CTX_PATH = Path("state/global_context.toml")
REFLEXIA_STATE = Path("state/reflexia_state.toml")
LOG_PATH = Path("modules/zeroia/logs/zeroia.log")
STATE_PATH = Path("modules/zeroia/state/zeroia_state.toml")
DASHBOARD_PATH = Path("state/zeroia_dashboard.json")
CONFIG_PATH = Path("config/zeroia_config.toml")
DEFAULT_CONTRADICTION_LOG = Path("logs/zeroia_contradictions.log")

# === Variables globales pour anti-r√©p√©tition ===
LAST_DECISION = None
LAST_DECISION_TIME = None
MIN_DECISION_INTERVAL = 30  # seconds

# === Cache TOML Enterprise optimis√© pour performance Docker ===
_TOML_CACHE: dict[str, Any] = {}
_CACHE_TIMESTAMPS: dict[str, Any] = {}
_CACHE_MAX_AGE = 30  # Cache 30s pour Docker container

# === Instances globales Circuit Breaker et Event Store ===
circuit_breaker: CircuitBreaker | None = None
event_store: EventStore | None = None
error_recovery: ErrorRecoverySystem | None = None
graceful_degradation: GracefulDegradationSystem | None = None

logger = logging.getLogger(__name__)

# === NOUVELLE INT√âGRATION ERROR RECOVERY ===

# Importer Error Recovery System
try:
    from .error_recovery_system import ErrorRecoverySystem  # noqa: F401

    ERROR_RECOVERY_AVAILABLE = True
except ImportError:
    ERROR_RECOVERY_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Error Recovery System non disponible")

# Importer Graceful Degradation
try:
    from .graceful_degradation import GracefulDegradationSystem

    GRACEFUL_DEGRADATION_AVAILABLE = True
except ImportError:
    GRACEFUL_DEGRADATION_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Graceful Degradation System non disponible")

# === NOUVELLE INT√âGRATION COGNITIVE REACTOR ===
try:
    from modules.sandozia.core.cognitive_reactor import trigger_cognitive_reaction

    COGNITIVE_REACTOR_AVAILABLE = True
    logger.info("üî• CognitiveReactor  # noqa: F401   int√©gr√© dans ZeroIA")
except ImportError:
    COGNITIVE_REACTOR_AVAILABLE = False
    logger.warning("‚ö†Ô∏è CognitiveReactor  # noqa: F401   non disponible")


def initialize_components() -> tuple[CircuitBreaker, EventStore]:
    """R√©trocompatibilit√© - initialise seulement CB + ES"""
    cb, es, _, _ = initialize_components_with_recovery()
    return cb, es


def initialize_components_with_recovery():
    """Initialize components with singleton pattern to prevent repeated initialization"""
    global circuit_breaker, event_store, error_recovery, graceful_degradation

    if circuit_breaker is not None and event_store is not None:
        return circuit_breaker, event_store, error_recovery, graceful_degradation

    try:
        circuit_breaker = CircuitBreaker()
        event_store = EventStore()
        error_recovery = ErrorRecoverySystem()
        graceful_degradation = GracefulDegradationSystem()

        logger.info("üöÄ Composants Enhanced + Error Recovery initialis√©s")
        return circuit_breaker, event_store, error_recovery, graceful_degradation

    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation composants: {e}")
        raise


def create_default_context_enhanced() -> dict:
    """
    Cr√©e un contexte par d√©faut enterprise pour √©viter les warnings CPU/RAM.
    Optimis√© pour containers Docker avec tous les modules Arkalia.
    Structure compl√®te v3.0 avec tous les modules.

    Returns:
        dict: Contexte par d√©faut enterprise avec valeurs optimales
    """
    current_time = datetime.now().isoformat()
    return {
        "last_update": current_time,
        "system_status": "operational",
        "active_modules": [
            "reflexia",
            "zeroia",
            "assistantia",
            "sandozia",
            "helloria",
            "taskia",
            "nyxalia",
        ],
        "version": "3.0.0-enhanced",
        "status": {
            "cpu": 45.2,  # CPU par d√©faut : 45% (charge normale container)
            "ram": 62.8,  # RAM par d√©faut : 62% (charge normale container)
            "severity": "normal",
            "disk_usage": 78,
            "network_latency": 25,
            "load_avg": 1.2,
            "active_processes": 150,
            "container_health": "healthy",
        },
        "reflexia": {
            "status": "operational",
            "last_check": current_time,
            "module_active": True,
            "last_decision": "normal",
            "confidence": 0.85,
            "cycle_count": 626,
        },
        "modules": {
            "sandozia": {
                "status": "active",
                "intelligence_level": "adaptive",
                "health": "healthy",
            },
            "assistantia": {
                "status": "active",
                "response_time": "optimal",
                "health": "healthy",
                "port": 8001,
            },
            "helloria": {"status": "active", "api_ready": True, "health": "healthy"},
            "nyxalia": {
                "status": "active",
                "monitoring": "enabled",
                "health": "healthy",
            },
            "taskia": {"status": "active", "queue_size": 0, "health": "healthy"},
            "zeroia": {
                "status": "active",
                "reason_loop": "enhanced",
                "health": "healthy",
                "circuit_breaker": "closed",
            },
        },
        "metadata": {
            "initialized": current_time,
            "version": "3.0.0-enhanced",
            "source": "arkalia_global_context_v3",
            "container": "arkalia-luna-system",
            "environment": "production",
            "docker_compose": True,
        },
    }


def load_toml_enhanced_cache(path: Path, max_age: int | None = None) -> dict:
    """
    Charge un fichier TOML avec cache intelligent Enterprise pour Docker.
    Optimis√© pour haute performance avec tous les modules Arkalia.

    Args:
        path: Chemin vers le fichier TOML
        max_age: √Çge maximum du cache (d√©faut: 30s pour Docker)

    Returns:
        dict: Contenu du fichier TOML

    Raises:
        DecisionIntegrityError: Si le fichier est invalide
        CognitiveOverloadError: Si erreur de chargement
    """
    if max_age is None:
        max_age = _CACHE_MAX_AGE

    path_str = str(path)
    current_time = time.time()

    # V√©rifier cache valide (performance Docker)
    if (
        path_str in _TOML_CACHE
        and path_str in _CACHE_TIMESTAMPS
        and current_time - _CACHE_TIMESTAMPS[path_str] < max_age
    ):
        return _TOML_CACHE[path_str]

    try:
        if not path.exists() or not path.read_text().strip():
            # Auto-cr√©ation contexte Enterprise si manquant
            if "global_context" in path_str:
                default_context = create_default_context_enhanced()
                ensure_parent_dir(path)
                with open(path, "w") as f:
                    toml.dump(default_context, f)
                _TOML_CACHE[path_str] = default_context
                _CACHE_TIMESTAMPS[path_str] = current_time
                print(f"‚úÖ [ZeroIA Enhanced] Contexte par d√©faut cr√©√©: {path}", flush=True)
                return default_context
            raise ValueError(f"TOML file {path} is empty or missing")

        data = toml.load(path)
        _TOML_CACHE[path_str] = data
        _CACHE_TIMESTAMPS[path_str] = current_time
        return data

    except toml.TomlDecodeError as e:
        raise DecisionIntegrityError(f"[TOML Enhanced] Format invalide dans {path}: {e}") from e
    except Exception as e:
        raise CognitiveOverloadError(
            f"[TOML Enhanced] Erreur lors du chargement de {path}: {e}"
        ) from e


def load_toml(path: Path) -> dict:
    """Charge un fichier TOML avec gestion d'erreurs robuste"""
    return load_toml_enhanced_cache(path)


def load_context(path: Path = CTX_PATH) -> dict:
    """Charge le contexte global avec protection circuit breaker"""
    cb, es, _, _ = initialize_components_with_recovery()
    return cb.call(load_toml, path)


def load_reflexia_state(path: Path = REFLEXIA_STATE) -> dict:
    """Charge l'√©tat ReflexIA avec protection circuit breaker"""
    cb, es, _, _ = initialize_components_with_recovery()
    return cb.call(load_toml, path)


def decide_protected(context: dict) -> tuple[str, float]:
    """
    Fonction de d√©cision prot√©g√©e par circuit breaker

    Args:
        context: Contexte syst√®me

    Returns:
        Tuple (d√©cision, score de confiance)

    Raises:
        CognitiveOverloadError: Si surcharge d√©tect√©e
        DecisionIntegrityError: Si int√©grit√© compromise
    """
    status = context.get("status", {})
    severity = status.get("severity", "none")
    cpu = status.get("cpu", 0)

    # Validation des donn√©es d'entr√©e
    if not isinstance(cpu, int | float) or cpu < 0 or cpu > 100:
        raise DecisionIntegrityError(f"CPU invalide: {cpu} (doit √™tre 0-100)")

    if severity not in ["none", "low", "medium", "high", "critical"]:
        raise DecisionIntegrityError(f"Severity invalide: {severity}")

    # D√©tection de surcharge cognitive
    if cpu > 95:
        raise CognitiveOverloadError(f"CPU critique: {cpu}% - syst√®me surcharg√©")

    # Logique de d√©cision avec seuils adaptatifs
    if should_lower_cpu_threshold() and cpu > 70:
        return "reduce_load", 0.75
    if severity == "critical":
        return "emergency_shutdown", 1.0
    if cpu > 80:
        return "reduce_load", 0.8
    if cpu > 60:
        return "monitor", 0.6

    return "normal", 0.4


def should_process_decision(new_decision: str) -> bool:
    """√âvite les r√©p√©titions excessives de la m√™me d√©cision"""
    global LAST_DECISION, LAST_DECISION_TIME

    current_time = datetime.now()

    # Si c'est une nouvelle d√©cision diff√©rente, on l'accepte
    if new_decision != LAST_DECISION:
        LAST_DECISION = new_decision
        LAST_DECISION_TIME = current_time
        return True

    # Si c'est la m√™me d√©cision, on v√©rifie l'intervalle de temps
    if LAST_DECISION_TIME is None:
        LAST_DECISION_TIME = current_time
        return True

    time_diff = (current_time - LAST_DECISION_TIME).total_seconds()

    # On accepte la r√©p√©tition seulement si assez de temps s'est √©coul√©
    if time_diff >= MIN_DECISION_INTERVAL:
        LAST_DECISION_TIME = current_time
        return True

    return False


def ensure_parent_dir(path: Path) -> None:
    """Assure que le r√©pertoire parent existe"""
    target = path.parent if path.suffix else path
    target.mkdir(parents=True, exist_ok=True)


def persist_state_enhanced(
    decision: str,
    score: float,
    ctx: dict,
    state_path_override: Path | None = None,
) -> None:
    """Persistance d'√©tat avec event sourcing"""
    reflexia_summary = ctx.get("reflexia", {})
    status = ctx.get("status", {})
    cpu = status.get("cpu", "N/A")
    severity = status.get("severity", "none")

    state_path = state_path_override or STATE_PATH
    ensure_parent_dir(state_path)
    save_backup()

    # Sauvegarder l'√©tat
    save_toml_if_changed(
        {
            "decision": {
                "last_decision": decision,
                "confidence_score": score,
                "justification": f"cpu={cpu}, severity={severity}",
                "timestamp": datetime.now().isoformat(),
            }
        },
        str(state_path),
    )

    # Event sourcing de la d√©cision
    _, es, _, _ = initialize_components_with_recovery()
    es.add_event(
        EventType.DECISION_MADE,
        {
            "decision": decision,
            "confidence": score,
            "cpu": cpu,
            "severity": severity,
            "reflexia_summary": reflexia_summary,
            "justification": f"cpu={cpu}, severity={severity}",
        },
    )

    # Log traditionnel
    ensure_parent_dir(LOG_PATH)
    with open(LOG_PATH, "a") as f:
        f.write(
            f"{datetime.now()} :: FROM REFLEXIA: {reflexia_summary} | "
            f"CPU={cpu} | SEVERITY={severity} ‚Üí DECISION = "
            f"{decision} (confidence={score})\n"
        )


def update_dashboard_enhanced(
    decision: str,
    score: float,
    ctx: dict,
    dashboard_path_override: Path | None = None,
) -> None:
    """Mise √† jour dashboard avec m√©triques circuit breaker"""
    dashboard_path = dashboard_path_override or DASHBOARD_PATH
    ensure_parent_dir(dashboard_path)

    cb, es, _, _ = initialize_components_with_recovery()

    # R√©cup√©rer les m√©triques du circuit breaker
    cb_status = cb.get_status()

    # R√©cup√©rer analytics des √©v√©nements
    analytics = es.get_analytics()

    dashboard_data = {
        "last_decision": decision,
        "confidence": score,
        "reasoning_loop_active": True,
        "connected_modules": ["reflexia"],
        "previous": ["reduce_load", "monitor", "monitor"],
        "last_updated": datetime.now().isoformat(),
        "circuit_breaker": {
            "state": cb_status["state"],
            "failure_rate": cb_status["metrics"]["failure_rate"],
            "success_rate": cb_status["metrics"]["success_rate"],
            "consecutive_failures": cb_status["metrics"]["consecutive_failures"],
        },
        "event_analytics": {
            "total_events": analytics["total_events"],
            "recent_events": analytics["recent_events_analyzed"],
            "events_by_type": analytics["events_by_type"],
        },
    }

    save_json_if_changed(dashboard_data, str(dashboard_path))


def check_for_ia_conflict_enhanced(
    reflexia_decision: str,
    zeroia_decision: str,
    log_path: Path,
) -> bool:
    """D√©tection de conflit IA avec gestion am√©lior√©e"""
    # Les variables globales sont initialis√©es dans initialize_components_with_recovery()
    # et accessibles via les param√®tres de la fonction

    if reflexia_decision != zeroia_decision and reflexia_decision != "unknown":
        ensure_parent_dir(log_path)

        # Log the contradiction
        with open(log_path, "a") as f:
            f.write(
                textwrap.dedent(
                    f"""
                    [{datetime.utcnow()}] CONTRADICTION DETECT√âE ‚Äî
                    ReflexIA={reflexia_decision}, ZeroIA={zeroia_decision}
                    """
                )
            )

        # Event sourcing de la contradiction
        # Note: event_store  # noqa: F401   est g√©r√© dans la fonction appelante
        logger.warning(
            f"CONTRADICTION DETECTED: ReflexIA = {reflexia_decision}, "
            f"ZeroIA = {zeroia_decision}"
        )
        return True

    return False


def reason_loop_enhanced_with_recovery(
    context_path: Path | None = None,
    reflexia_path: Path | None = None,
    state_path: Path | None = None,
    dashboard_path: Path | None = None,
    log_path: Path | None = None,
    contradiction_log_path: Path | None = None,
) -> tuple[str, float]:
    """
    Boucle de raisonnement Enhanced avec Error Recovery int√©gr√© (version synchrone)

    Cette fonction int√®gre :
    - Circuit Breaker protection
    - Error Recovery automatique
    - Event Sourcing complet
    - Monitoring en temps r√©el

    Returns:
        Tuple (decision, confidence_score)
    """
    # Initialiser tous les composants
    cb, es, error_recovery, graceful_degradation = initialize_components_with_recovery()

    try:
        # Charger contexte et donn√©es
        ctx = load_context(context_path or CTX_PATH)
        reflexia_data = load_reflexia_state(reflexia_path or REFLEXIA_STATE)

        # Calculer sant√© syst√®me basique
        status = ctx.get("status", {})
        cpu = status.get("cpu", 50.0)
        ram = status.get("ram", 60.0)

        # Sant√© basique bas√©e sur CPU/RAM
        system_health = 1.0
        if cpu > 90 or ram > 95:
            system_health = 0.3
        elif cpu > 80 or ram > 85:
            system_health = 0.6
        elif cpu > 70 or ram > 75:
            system_health = 0.8

        # D√©cision prot√©g√©e par Circuit Breaker ET Error Recovery
        decision_error = None
        try:
            decision, score = cb.call(decide_protected, ctx)

        except Exception as e:
            decision_error = e
            logger.warning(f"üîÑ Erreur dans d√©cision, utilisation Error Recovery: {e}")

            # Fallback simple si Error Recovery non disponible
            if error_recovery is None:
                decision, score = "monitor", 0.1
                logger.warning("‚ùå Error Recovery non disponible, fallback basique")
            else:
                try:
                    # D√©cision bas√©e sur l'erreur
                    if isinstance(e, SystemRebootRequired):
                        decision, score = "halt", 0.9
                    elif isinstance(e, CognitiveOverloadError):
                        decision, score = "reduce_load", 0.7
                    elif isinstance(e, DecisionIntegrityError):
                        decision, score = "monitor", 0.5
                    else:
                        decision, score = "monitor", 0.1

                    logger.info(f"‚úÖ Error Recovery appliqu√©: {decision} (score={score})")

                    # Enregistrer la r√©cup√©ration
                    es.add_event(
                        EventType.SYSTEM_ERROR,
                        {
                            "error_recovery": True,
                            "original_error": str(e),
                            "recovery_decision": decision,
                            "recovery_score": score,
                        },
                    )

                except Exception as recovery_error:
                    logger.error(f"‚ùå Error Recovery √©chou√©: {recovery_error}")
                    decision, score = "monitor", 0.1

        # Anti-r√©p√©tition
        if not should_process_decision(decision):
            logger.info(f"üîÑ D√©cision ignor√©e (r√©p√©tition): {decision}")
            return decision, score

        # üî• NOUVELLE INT√âGRATION COGNITIVE REACTOR
        if COGNITIVE_REACTOR_AVAILABLE:
            try:
                # Pr√©parer le contexte pour CognitiveReactor  # noqa: F401
                cognitive_context = {
                    "timestamp": datetime.now().isoformat(),
                    "zeroia_decision": decision,
                    "confidence": score,
                    "system_health": system_health,
                    "cpu": cpu,
                    "ram": ram,
                    "reflexia_decision": reflexia_data.get("decision", {}).get(
                        "last_decision", "unknown"
                    ),
                    "decision_pattern_count": 0,  # Sera calcul√© par CognitiveReactor  # noqa: F401
                }

                # D√©clencher les r√©actions automatiques (version synchrone)
                cognitive_reactions = trigger_cognitive_reaction(cognitive_context, 0)

                if cognitive_reactions:
                    logger.info(f"üî• R√©actions automatiques d√©clench√©es: {cognitive_reactions}")

                    # Event sourcing des r√©actions cognitives
                    es.add_event(
                        EventType.CONFIDENCE_UPDATE,
                        {
                            "cognitive_reactions": cognitive_reactions,
                            "trigger_context": cognitive_context,
                            "reaction_count": len(cognitive_reactions),
                        },
                        module="cognitive_reactor",
                    )

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur CognitiveReactor  # noqa: F401  : {e}")

        # Persistance avec protection
        persist_state_enhanced(decision, score, ctx, state_path)
        update_dashboard_enhanced(decision, score, ctx, dashboard_path)

        # Event sourcing de succ√®s
        if es is not None:
            es.add_event(
                EventType.CIRCUIT_SUCCESS,
                {
                    "decision": decision,
                    "confidence": score,
                    "system_health": system_health,
                    "error_recovery_active": error_recovery is not None,
                    "had_error": decision_error is not None,
                    "cpu": cpu,
                    "ram": ram,
                },
                module="reason_loop_enhanced",
            )

        # V√©rification contradictions avec gestion am√©lior√©e
        reflexia_decision = reflexia_data.get("decision", {}).get("last_decision", "unknown")
        if check_for_ia_conflict_enhanced(
            reflexia_decision,
            decision,
            log_path=contradiction_log_path or Path(DEFAULT_CONTRADICTION_LOG),
        ):
            logger.warning(
                f"CONTRADICTION DETECTED: ReflexIA = {reflexia_decision}, " f"ZeroIA = {decision}"
            )

        # Logs am√©lior√©s avec Error Recovery
        error_recovery_status = "‚úÖ" if decision_error is None else "üîÑ"
        print(
            f"{error_recovery_status} ZeroIA decided: {decision} "
            f"(confidence={score}, health={system_health:.2f})",
            flush=True,
        )
        print(
            f"[ZeroIA] CPU usage: {cpu}% ‚Üí decision={decision} (score={score})",
            flush=True,
        )

        if decision_error:
            print(
                f"[ZeroIA] Error Recovery triggered for: {type(decision_error).__name__}",
                flush=True,
            )

        return decision, score

    except SystemRebootRequired:
        # Propagation pour gestion niveau sup√©rieur
        raise
    except (CognitiveOverloadError, DecisionIntegrityError) as e:
        # Erreurs g√©r√©es par le circuit breaker
        logger.error(f"üö® [ZeroIA] Erreur g√©r√©e: {e}")

        # D√©cision de s√©curit√© en cas d'erreur
        fallback_decision, fallback_score = "monitor", 0.1

        # Event sourcing de la r√©cup√©ration
        es.add_event(
            EventType.SYSTEM_ERROR,
            {
                "error_type": type(e).__name__,
                "error": str(e),
                "fallback_decision": fallback_decision,
                "fallback_score": fallback_score,
                "error_recovery_triggered": True,
            },
        )

        return fallback_decision, fallback_score

    except Exception as e:
        # Erreur inattendue - event sourcing critique
        logger.error(f"üí• [ZeroIA] Erreur critique: {e}")

        es.add_event(
            EventType.SYSTEM_ERROR,
            {"error_type": "unexpected_error", "error": str(e), "severity": "critical"},
        )

        # Reraise pour gestion niveau sup√©rieur
        raise CognitiveOverloadError(f"Erreur critique dans reason_loop: {e}") from e


def main_loop_enhanced() -> None:
    """Boucle principale avec gestion d'erreurs et r√©cup√©ration"""
    global circuit_breaker, event_store

    if circuit_breaker is None or event_store is None:
        cb, es, _, _ = initialize_components_with_recovery()
        circuit_breaker = cb
        event_store = es

    try:
        decision, score = reason_loop_enhanced_with_recovery()

        # Event sourcing de succ√®s
        if event_store is not None:
            event_store.add_event(
                EventType.CIRCUIT_SUCCESS,
                {"decision": decision, "confidence": score, "loop_iteration": "successful"},
            )

        # Ajouter un d√©lai pour √©viter les boucles trop rapides
        time.sleep(2)

    except SystemRebootRequired as e:
        print(f"[ZeroIA Enhanced] üîÑ RED√âMARRAGE REQUIS: {e}", flush=True)

        # Event sourcing critique
        if event_store is not None:
            event_store.add_event(
                EventType.SYSTEM_ERROR,
                {
                    "error_type": "reboot_required",
                    "error": str(e),
                    "severity": "critical",
                    "action_required": "system_restart",
                },
            )

        # Attendre avant retry
        time.sleep(60)

    except (CognitiveOverloadError, DecisionIntegrityError) as e:
        print(f"[ZeroIA Enhanced] ‚ö†Ô∏è SURCHARGE: {e}", flush=True)

        # Graceful degradation
        time.sleep(30)

    except Exception as e:
        print(f"[ZeroIA Enhanced] üö® ERREUR: {e}", flush=True)
        logger.exception(e)

        # Event sourcing d'erreur
        if event_store is not None:
            event_store.add_event(
                EventType.SYSTEM_ERROR,
                {"error_type": "main_loop_error", "error": str(e), "severity": "high"},
            )

        # Attendre avant retry
        time.sleep(10)


def get_circuit_status() -> dict:
    """Retourne le statut du circuit breaker"""
    cb, es, _, _ = initialize_components_with_recovery()
    return cb.get_status()


def get_event_analytics() -> dict:
    """Retourne les analytics des √©v√©nements"""
    cb, es, _, _ = initialize_components_with_recovery()
    return es.get_analytics()


def reset_circuit_breaker() -> None:
    """R√©initialise manuellement le circuit breaker"""
    cb, es, _, _ = initialize_components_with_recovery()
    cb.reset()
    print("üîÑ Circuit breaker r√©initialis√© manuellement")


def cleanup_components(circuit_breaker: CircuitBreaker, event_store: EventStore) -> None:
    """
    Nettoie les composants enhanced √† la fin de l'orchestration

    Args:
        circuit_breaker: Instance Circuit Breaker √† nettoyer
        event_store: Instance Event Store √† nettoyer
    """
    logger.info("üßπ Cleanup des composants enhanced...")

    try:
        # Logs finaux du circuit breaker
        status = circuit_breaker.get_status()
        logger.info(f"üîÑ Circuit Breaker final - √âtat: {status['state']}")
        logger.info(f"üìä M√©triques finales - Succ√®s: {status['metrics']['success_rate']:.2f}%")

        # Analytics finaux event store
        analytics = event_store.get_analytics()
        logger.info(f"üìã Event Store final - {analytics['total_events']} √©v√©nements")

        # Event de cleanup
        event_store.add_event(
            EventType.STATE_CHANGE,
            {
                "action": "components_cleanup",
                "circuit_final_state": status["state"],
                "total_events": analytics["total_events"],
            },
            module="reason_loop_enhanced",
        )

        logger.info("‚úÖ Cleanup termin√© avec succ√®s")

    except Exception as e:
        logger.error(f"‚ö†Ô∏è Erreur pendant cleanup: {e}")


def get_error_recovery_status() -> dict:
    """Retourne le statut du syst√®me Error Recovery"""
    try:
        _, _, error_recovery, _ = initialize_components_with_recovery()
        if error_recovery:
            return error_recovery.get_recovery_status()
        else:
            return {"status": "unavailable", "reason": "module_not_loaded"}
    except Exception as e:
        return {"status": "error", "error": str(e)}


def get_degradation_status() -> dict:
    """Retourne le statut du syst√®me Graceful Degradation"""
    try:
        _, _, _, graceful_degradation = initialize_components_with_recovery()
        if graceful_degradation:
            return graceful_degradation.get_system_status()
        else:
            return {"status": "unavailable", "reason": "module_not_loaded"}
    except Exception as e:
        return {"status": "error", "error": str(e)}


# Alias pour r√©trocompatibilit√© avec Error Recovery
reason_loop_enhanced = reason_loop_enhanced_with_recovery


class ReasonLoopEnhanced:
    """Boucle de raisonnement am√©lior√©e pour ZeroIA"""

    def __init__(self, config_path: str | None = None) -> None:
        self.event_store = EventStore()
        self.circuit_breaker = CircuitBreaker()
        self.error_recovery = ErrorRecoverySystem()
        self.graceful_degradation = GracefulDegradationSystem()

        # Configuration
        self.config = {
            "contradiction_threshold": 3,
            "contradiction_cooldown": 60,
            "min_confidence_score": 0.6,
            "decision_timeout": 30,
            "max_retries": 3,
            "sync_interval": 5,  # secondes
            "sync_timeout": 10,  # secondes
            "sync_retries": 3,
        }

        # √âtat
        self.last_decision: str | None = None
        self.decision_count = 0
        self.contradiction_count = 0
        self.last_contradiction: datetime | None = None
        self.confidence_score = 0.85
        self.sync_state: dict[str, Any] = {
            "reflexia": "unknown",
            "last_sync": None,
            "sync_failures": 0,
        }

    def handle_contradiction(self, zeroia_state: str, reflexia_state: str) -> None:
        """G√®re une contradiction entre ZeroIA et ReflexIA"""
        now = datetime.now()

        # Incr√©menter le compteur de contradictions
        self.contradiction_count += 1
        self.last_contradiction = now

        # R√©duire le score de confiance
        self.confidence_score *= 0.8

        # Logger la contradiction
        logger.warning(f"‚ö†Ô∏è CONTRADICTION: ZeroIA={zeroia_state}, ReflexIA={reflexia_state}")

        # V√©rifier si nous devons d√©clencher une r√©cup√©ration
        if self.contradiction_count >= self.config["contradiction_threshold"]:
            self._trigger_recovery()

    def _trigger_recovery(self) -> None:
        """D√©clenche une proc√©dure de r√©cup√©ration"""
        logger.info("üîÑ D√©clenchement de la proc√©dure de r√©cup√©ration")

        # R√©initialiser les compteurs
        self.contradiction_count = 0
        self.decision_count = 0

        # Forcer une synchronisation avec ReflexIA
        self._sync_with_reflexia()

        # Activer le circuit breaker
        self.circuit_breaker.trip()

    def _sync_with_reflexia(self) -> bool:
        """Synchronise avec ReflexIA"""
        try:
            # Simuler une synchronisation
            self.sync_state["reflexia"] = "synced"
            self.sync_state["last_sync"] = datetime.now().isoformat()
            self.sync_state["sync_failures"] = 0
            return True
        except Exception as e:
            logger.error(f"üö® Erreur synchronisation ReflexIA: {e}")
            if isinstance(self.sync_state["sync_failures"], int):
                self.sync_state["sync_failures"] += 1
            return False

    def _get_reflexia_state(self) -> str | None:
        """R√©cup√®re l'√©tat de ReflexIA"""
        try:
            if REFLEXIA_STATE.exists():
                import toml

                state = toml.load(REFLEXIA_STATE)
                return state.get("status", "unknown")
        except Exception as e:
            logger.error(f"üö® Erreur lecture √©tat ReflexIA: {e}")
        return None

    def run_loop(self) -> None:
        """Ex√©cute la boucle de raisonnement"""
        while True:
            try:
                decision, score = reason_loop_enhanced_with_recovery()
                self.decision_count += 1

                # V√©rifier les contradictions
                reflexia_state = self._get_reflexia_state()
                if reflexia_state and reflexia_state != decision:
                    self.handle_contradiction(decision, reflexia_state)

                # Attendre avant la prochaine it√©ration
                time.sleep(self.config["sync_interval"])

            except Exception as e:
                logger.error(f"üö® Erreur dans la boucle: {e}")
                time.sleep(10)


if __name__ == "__main__":
    try:
        main_loop_enhanced()
    except KeyboardInterrupt:
        print("\nüõë Arr√™t manuel d√©tect√©")

        # Cleanup final
        try:
            cb, es, _, _ = initialize_components_with_recovery()
            if es is not None:
                es.add_event(
                    EventType.STATE_CHANGE,
                    {"action": "manual_shutdown", "reason": "keyboard_interrupt"},
                )
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du cleanup: {e}")

        print("‚úÖ Cleanup termin√©")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)
