#!/usr/bin/env python3
"""
üìä State Manager - Gestionnaire d'√©tat pour ZeroIA

Extrait de reason_loop_enhanced.py pour simplifier la maintenance.
Responsabilit√© : Persistance et gestion des √©tats.
"""

import json
import logging
import textwrap
from datetime import datetime
from pathlib import Path
from typing import Any, Optional

import toml

from modules.zeroia.utils.backup import save_backup
from modules.zeroia.utils.state_writer import save_json_if_changed, save_toml_if_changed

logger = logging.getLogger(__name__)

# === Chemins par d√©faut ===
STATE_PATH = Path("modules/zeroia/state/zeroia_state.toml")
DASHBOARD_PATH = Path("state/zeroia_dashboard.json")
DEFAULT_CONTRADICTION_LOG = Path("logs/zeroia_contradictions.log")


class StateManager:
    """Gestionnaire d'√©tat pour ZeroIA"""
    
    def __init__(self):
        self.state_path = STATE_PATH
        self.dashboard_path = DASHBOARD_PATH
        self.contradiction_log_path = DEFAULT_CONTRADICTION_LOG
    
    def ensure_parent_dir(self, path: Path) -> None:
        """Assure que le r√©pertoire parent existe"""
        path.parent.mkdir(parents=True, exist_ok=True)
    
    def persist_state_enhanced(
        self,
        decision: str,
        score: float,
        ctx: dict,
        state_path_override: Optional[Path] = None,
    ) -> None:
        """
        Persiste l'√©tat ZeroIA avec m√©tadonn√©es enrichies
        
        Args:
            decision: D√©cision prise
            score: Score de confiance
            ctx: Contexte global
            state_path_override: Chemin alternatif pour l'√©tat
        """
        try:
            state_path = state_path_override or self.state_path
            self.ensure_parent_dir(state_path)
            
            current_time = datetime.now().isoformat()
            
            # √âtat enrichi avec m√©tadonn√©es
            state_data = {
                "last_decision": decision,
                "confidence_score": score,
                "timestamp": current_time,
                "context_snapshot": {
                    "cpu": ctx.get("status", {}).get("cpu", 0),
                    "ram": ctx.get("status", {}).get("ram", 0),
                    "severity": ctx.get("status", {}).get("severity", "unknown"),
                    "system_status": ctx.get("system_status", "unknown"),
                },
                "metadata": {
                    "version": "3.0.0-enhanced",
                    "source": "zeroia_state_manager",
                    "decision_engine": "enhanced",
                    "circuit_breaker": "closed",
                    "error_recovery": "enabled",
                },
                "performance": {
                    "decision_time": datetime.now().isoformat(),
                    "processing_duration": 0.0,  # Sera mis √† jour par le caller
                },
            }
            
            # Sauvegarder avec validation
            save_toml_if_changed(state_data, str(state_path))
            
            # Backup automatique
            try:
                save_backup()
            except Exception as e:
                logger.warning(f"Backup √©chou√©: {e}")
            
            logger.info(f"‚úÖ √âtat persist√©: {decision} (score: {score:.2f})")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur persistance √©tat: {e}")
            raise
    
    def update_dashboard_enhanced(
        self,
        decision: str,
        score: float,
        ctx: dict,
        dashboard_path_override: Optional[Path] = None,
    ) -> None:
        """
        Met √† jour le dashboard avec les derni√®res d√©cisions
        
        Args:
            decision: D√©cision prise
            score: Score de confiance
            ctx: Contexte global
            dashboard_path_override: Chemin alternatif pour le dashboard
        """
        try:
            dashboard_path = dashboard_path_override or self.dashboard_path
            self.ensure_parent_dir(dashboard_path)
            
            current_time = datetime.now().isoformat()
            
            # Charger le dashboard existant ou cr√©er un nouveau
            if dashboard_path.exists():
                try:
                    with open(dashboard_path, "r", encoding="utf-8") as f:
                        dashboard = json.load(f)
                except Exception:
                    dashboard = {"decisions": [], "metadata": {}}
            else:
                dashboard = {"decisions": [], "metadata": {}}
            
            # Ajouter la nouvelle d√©cision
            decision_entry = {
                "timestamp": current_time,
                "decision": decision,
                "confidence": score,
                "context": {
                    "cpu": ctx.get("status", {}).get("cpu", 0),
                    "ram": ctx.get("status", {}).get("ram", 0),
                    "severity": ctx.get("status", {}).get("severity", "unknown"),
                },
            }
            
            dashboard["decisions"].append(decision_entry)
            
            # Garder seulement les 100 derni√®res d√©cisions
            if len(dashboard["decisions"]) > 100:
                dashboard["decisions"] = dashboard["decisions"][-100:]
            
            # Mettre √† jour les m√©tadonn√©es
            dashboard["metadata"] = {
                "last_update": current_time,
                "total_decisions": len(dashboard["decisions"]),
                "version": "3.0.0-enhanced",
                "source": "zeroia_dashboard_manager",
            }
            
            # Sauvegarder
            save_json_if_changed(dashboard, str(dashboard_path))
            
            logger.debug(f"üìä Dashboard mis √† jour: {decision}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour dashboard: {e}")
            # Ne pas faire √©chouer le processus principal
    
    def check_for_ia_conflict_enhanced(
        self,
        reflexia_decision: str,
        zeroia_decision: str,
        log_path: Optional[Path] = None,
    ) -> bool:
        """
        V√©rifie les conflits entre Reflexia et ZeroIA
        
        Args:
            reflexia_decision: D√©cision de Reflexia
            zeroia_decision: D√©cision de ZeroIA
            log_path: Chemin du log de contradictions
            
        Returns:
            bool: True si conflit d√©tect√©
        """
        try:
            log_path = log_path or self.contradiction_log_path
            self.ensure_parent_dir(log_path)
            
            # D√©tecter les contradictions
            contradictions = []
            
            # Reflexia critique mais ZeroIA normal
            if reflexia_decision == "critical" and zeroia_decision == "normal":
                contradictions.append("Reflexia critique vs ZeroIA normal")
            
            # Reflexia normal mais ZeroIA critique
            elif reflexia_decision == "normal" and zeroia_decision == "critical":
                contradictions.append("Reflexia normal vs ZeroIA critique")
            
            # D√©cisions oppos√©es
            elif reflexia_decision != zeroia_decision:
                contradictions.append(f"D√©cisions divergentes: {reflexia_decision} vs {zeroia_decision}")
            
            # Logger les contradictions
            if contradictions:
                current_time = datetime.now().isoformat()
                conflict_log = {
                    "timestamp": current_time,
                    "reflexia_decision": reflexia_decision,
                    "zeroia_decision": zeroia_decision,
                    "contradictions": contradictions,
                    "severity": "warning",
                }
                
                try:
                    with open(log_path, "a", encoding="utf-8") as f:
                        f.write(json.dumps(conflict_log) + "\n")
                    
                    logger.warning(f"‚ö†Ô∏è Conflit IA d√©tect√©: {contradictions}")
                    return True
                    
                except Exception as e:
                    logger.error(f"Erreur log conflit: {e}")
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification conflit: {e}")
            return False
    
    def load_current_state(self) -> dict:
        """Charge l'√©tat actuel de ZeroIA"""
        try:
            if self.state_path.exists():
                with open(self.state_path, "r", encoding="utf-8") as f:
                    return toml.load(f)
            else:
                logger.warning(f"√âtat ZeroIA non trouv√©: {self.state_path}")
                return {
                    "last_decision": "unknown",
                    "confidence_score": 0.0,
                    "timestamp": datetime.now().isoformat(),
                }
        except Exception as e:
            logger.error(f"Erreur chargement √©tat: {e}")
            return {
                "last_decision": "error",
                "confidence_score": 0.0,
                "timestamp": datetime.now().isoformat(),
            }
    
    def get_dashboard_summary(self) -> dict:
        """R√©cup√®re un r√©sum√© du dashboard"""
        try:
            if not self.dashboard_path.exists():
                return {"total_decisions": 0, "last_decision": "none"}
            
            with open(self.dashboard_path, "r", encoding="utf-8") as f:
                dashboard = json.load(f)
            
            decisions = dashboard.get("decisions", [])
            if not decisions:
                return {"total_decisions": 0, "last_decision": "none"}
            
            last_decision = decisions[-1]
            return {
                "total_decisions": len(decisions),
                "last_decision": last_decision.get("decision", "unknown"),
                "last_confidence": last_decision.get("confidence", 0.0),
                "last_timestamp": last_decision.get("timestamp", ""),
            }
            
        except Exception as e:
            logger.error(f"Erreur r√©sum√© dashboard: {e}")
            return {"total_decisions": 0, "last_decision": "error"}
    
    def cleanup_old_logs(self, max_age_days: int = 30) -> None:
        """Nettoie les anciens logs"""
        try:
            if not self.contradiction_log_path.exists():
                return
            
            cutoff_time = datetime.now().timestamp() - (max_age_days * 24 * 3600)
            
            # Lire et filtrer les logs
            with open(self.contradiction_log_path, "r", encoding="utf-8") as f:
                lines = f.readlines()
            
            # Garder seulement les logs r√©cents
            recent_lines = []
            for line in lines:
                try:
                    log_entry = json.loads(line.strip())
                    timestamp = datetime.fromisoformat(log_entry.get("timestamp", "")).timestamp()
                    if timestamp > cutoff_time:
                        recent_lines.append(line)
                except Exception:
                    # Garder les lignes non-JSON
                    recent_lines.append(line)
            
            # R√©√©crire le fichier
            with open(self.contradiction_log_path, "w", encoding="utf-8") as f:
                f.writelines(recent_lines)
            
            logger.info(f"üßπ Logs nettoy√©s: {len(lines) - len(recent_lines)} entr√©es supprim√©es")
            
        except Exception as e:
            logger.error(f"Erreur nettoyage logs: {e}") 