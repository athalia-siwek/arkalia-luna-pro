#!/usr/bin/env python3
"""
üåï ARKALIA MASTER ORCHESTRATOR ULTIMATE v4.0.0

Orchestrateur Ma√Ætre coordonnant l'√©cosyst√®me complet Arkalia-LUNA
G√®re intelligemment les 10 modules IA avec cycles adaptatifs
"""

from core.ark_logger import ark_logger
import asyncio
import logging
import time
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any, Optional

import toml

# AssistantIA - Chat & interactions
from ..assistantia.core import router as assistantia_router

# Monitoring - M√©triques Prometheus
from ..monitoring.prometheus_metrics import ArkaliaMetrics

# NyxalIA - Interpr√©tation signaux
from ..nyxalia.core import interpret_signal

# ReflexIA - Monitoring & auto-r√©flexion
from ..reflexia.core import get_metrics, launch_reflexia_check

# SandozIA - Intelligence crois√©e
from ..sandozia.core.sandozia_core import SandoziaCore

# Security - Protection & cryptographie
from ..security.crypto.checksum_validator import BuildIntegrityValidator

# TaskIA - Coordination t√¢ches
from ..taskia.core import taskia_main

# Utils Enhanced - Cache & optimisations
from ..utils_enhanced.cache_enhanced import load_toml_cached
from ..zeroia.circuit_breaker import CircuitBreaker

# === IMPORTS MODULES ARKALIA ===
# ZeroIA - D√©cisions & raisonnement
from ..zeroia.core import ZeroIACore

logger = logging.getLogger(__name__)


class CycleMode(Enum):
    """Modes de cycle adaptatifs"""

    URGENT = "urgent"  # 5s - D√©cisions critiques
    NORMAL = "normal"  # 30s - Op√©rations standard
    DEEP_ANALYSIS = "deep"  # 300s - Analyse approfondie
    MAINTENANCE = "maintenance"  # 1800s - Maintenance syst√®me


class ModuleStatus(Enum):
    """√âtats des modules"""

    HEALTHY = "healthy"
    DEGRADED = "degraded"
    CRITICAL = "critical"
    OFFLINE = "offline"
    INITIALIZING = "initializing"


@dataclass
class OrchestratorConfig:
    """Configuration Master Orchestrator"""

    # Cycles adaptatifs
    cycle_intervals: dict[CycleMode, float] = field(
        default_factory=lambda: {
            CycleMode.URGENT: 5.0,
            CycleMode.NORMAL: 30.0,
            CycleMode.DEEP_ANALYSIS: 300.0,
            CycleMode.MAINTENANCE: 1800.0,
        }
    )

    # Circuit breaker global
    global_failure_threshold: int = 10
    global_timeout: int = 60

    # Modules actifs
    enabled_modules: list[str] = field(
        default_factory=lambda: [
            "zeroia",
            "reflexia",
            "assistantia",
            "sandozia",
            "taskia",
            "helloria",
            "nyxalia",
            "security",
            "monitoring",
            "utils",
        ]
    )

    # Performance
    max_concurrent_operations: int = 5
    health_check_interval: float = 60.0

    # Persistance
    state_file: Path = Path("state/arkalia_master_state.toml")
    log_file: Path = Path("logs/arkalia_master.log")


@dataclass
class ModuleWrapper:
    """Wrapper unifi√© pour chaque module"""

    name: str
    instance: Any
    status: ModuleStatus = ModuleStatus.INITIALIZING
    last_execution: datetime | None = None
    execution_count: int = 0
    error_count: int = 0
    last_error: str | None = None

    def update_success(self):
        """Met √† jour apr√®s ex√©cution r√©ussie"""
        self.last_execution = datetime.now()
        self.execution_count += 1
        self.status = ModuleStatus.HEALTHY

    def update_error(self, error: str):
        """Met √† jour apr√®s erreur"""
        self.error_count += 1
        self.last_error = error
        self.status = ModuleStatus.DEGRADED if self.error_count < 5 else ModuleStatus.CRITICAL


class ArkaliaOrchestrator:
    """
    üåï ORCHESTRATEUR MA√éTRE ARKALIA-LUNA v4.0.0

    Fonctionnalit√©s :
    - Coordination intelligente 10 modules IA
    - Cycles adaptatifs (urgent/normal/deep/maintenance)
    - Circuit breaker global protection
    - Communication inter-modules optimis√©e
    - Global State Master unifi√©
    - Auto-healing & resilience patterns
    """

    def __init__(self, config: OrchestratorConfig | None = None) -> None:
        self.config = config or OrchestratorConfig()
        self.current_cycle_mode = CycleMode.NORMAL
        self.is_running = False
        self.start_time = time.time()

        # Circuit breaker global
        self.global_circuit_breaker = CircuitBreaker(
            failure_threshold=self.config.global_failure_threshold,
            timeout=self.config.global_timeout,
        )

        # √âtat orchestrateur
        self.cycle_count = 0
        self.total_operations = 0
        self.successful_operations = 0
        self.failed_operations = 0

        # Modules wrapp√©s
        self.modules: dict[str, ModuleWrapper] = {}

        # Global State Master
        self.global_state: dict[str, Any] = {}

        # Tasks asyncio
        self.orchestration_task: asyncio.Task | None = None
        self.health_check_task: asyncio.Task | None = None

        logger.info("üåï ArkaliaOrchestrator Ultimate v4.0.0 initialized")

    async def initialize_modules(self) -> bool:
        """
        Initialise tous les modules Arkalia de mani√®re coordonn√©e
        """
        logger.info("üîå Initializing 10 Arkalia modules...")

        initialization_results: dict[str, Any] = {}

        # === ZEROIA - D√©cisions & raisonnement ===
        if "zeroia" in self.config.enabled_modules:
            try:
                zeroia_core = ZeroIACore()
                if await asyncio.to_thread(zeroia_core.initialize):
                    self.modules["zeroia"] = ModuleWrapper("zeroia", zeroia_core)
                    initialization_results["zeroia"] = "‚úÖ SUCCESS"
                else:
                    initialization_results["zeroia"] = "‚ùå FAILED"
            except Exception as e:
                initialization_results["zeroia"] = f"‚ùå ERROR: {e}"

        # === REFLEXIA - Monitoring & auto-r√©flexion ===
        if "reflexia" in self.config.enabled_modules:
            try:
                # Test fonction r√©flexIA
                test_metrics = await asyncio.to_thread(get_metrics)
                if test_metrics:
                    self.modules["reflexia"] = ModuleWrapper("reflexia", launch_reflexia_check)
                    initialization_results["reflexia"] = "‚úÖ SUCCESS"
                else:
                    initialization_results["reflexia"] = "‚ùå FAILED"
            except Exception as e:
                initialization_results["reflexia"] = f"‚ùå ERROR: {e}"

        # === ASSISTANTIA - Chat & interactions ===
        if "assistantia" in self.config.enabled_modules:
            try:
                # V√©rifier que le router est disponible
                if assistantia_router:
                    self.modules["assistantia"] = ModuleWrapper("assistantia", assistantia_router)
                    initialization_results["assistantia"] = "‚úÖ SUCCESS"
                else:
                    initialization_results["assistantia"] = "‚ùå FAILED"
            except Exception as e:
                initialization_results["assistantia"] = f"‚ùå ERROR: {e}"

        # === SANDOZIA - Intelligence crois√©e ===
        if "sandozia" in self.config.enabled_modules:
            try:
                sandozia_core = SandoziaCore()
                self.modules["sandozia"] = ModuleWrapper("sandozia", sandozia_core)
                initialization_results["sandozia"] = "‚úÖ SUCCESS"
            except Exception as e:
                initialization_results["sandozia"] = f"‚ùå ERROR: {e}"

        # === TASKIA - Coordination t√¢ches ===
        if "taskia" in self.config.enabled_modules:
            try:
                # Test fonction TaskIA
                test_result = await asyncio.to_thread(taskia_main, {"test": "init"})
                if test_result:
                    self.modules["taskia"] = ModuleWrapper("taskia", taskia_main)
                    initialization_results["taskia"] = "‚úÖ SUCCESS"
                else:
                    initialization_results["taskia"] = "‚ùå FAILED"
            except Exception as e:
                initialization_results["taskia"] = f"‚ùå ERROR: {e}"

        # === HELLORIA - API & routing ===
        if "helloria" in self.config.enabled_modules:
            try:
                # HellorIA fonctionne via container, on marque comme disponible
                self.modules["helloria"] = ModuleWrapper("helloria", "container_based")
                initialization_results["helloria"] = "‚úÖ SUCCESS (Container)"
            except Exception as e:
                initialization_results["helloria"] = f"‚ùå ERROR: {e}"

        # === NYXALIA - Interpr√©tation signaux ===
        if "nyxalia" in self.config.enabled_modules:
            try:
                test_signal = await asyncio.to_thread(interpret_signal, "ping")
                if test_signal == "pong":
                    self.modules["nyxalia"] = ModuleWrapper("nyxalia", interpret_signal)
                    initialization_results["nyxalia"] = "‚úÖ SUCCESS"
                else:
                    initialization_results["nyxalia"] = "‚ùå FAILED"
            except Exception as e:
                initialization_results["nyxalia"] = f"‚ùå ERROR: {e}"

        # === SECURITY - Protection & cryptographie ===
        if "security" in self.config.enabled_modules:
            try:
                security_validator = BuildIntegrityValidator()
                self.modules["security"] = ModuleWrapper("security", security_validator)
                initialization_results["security"] = "‚úÖ SUCCESS"
            except Exception as e:
                initialization_results["security"] = f"‚ùå ERROR: {e}"

        # === MONITORING - M√©triques Prometheus ===
        if "monitoring" in self.config.enabled_modules:
            try:
                arkalia_metrics = ArkaliaMetrics()
                self.modules["monitoring"] = ModuleWrapper("monitoring", arkalia_metrics)
                initialization_results["monitoring"] = "‚úÖ SUCCESS"
            except Exception as e:
                initialization_results["monitoring"] = f"‚ùå ERROR: {e}"

        # === UTILS ENHANCED - Cache & optimisations ===
        if "utils" in self.config.enabled_modules:
            try:
                # Test fonction utils enhanced
                test_load = await asyncio.to_thread(load_toml_cached, "version.toml")
                if test_load:
                    self.modules["utils"] = ModuleWrapper("utils", load_toml_cached)
                    initialization_results["utils"] = "‚úÖ SUCCESS"
                else:
                    initialization_results["utils"] = "‚ùå FAILED"
            except Exception as e:
                initialization_results["utils"] = f"‚ùå ERROR: {e}"

        # === RAPPORT D'INITIALISATION ===
        logger.info("=" * 70)
        logger.info("üåï ARKALIA MODULES INITIALIZATION REPORT")
        logger.info("=" * 70)

        success_count = 0
        for module_name, result in initialization_results.items():
            logger.info(f"  {module_name:12} : {result}")
            if "SUCCESS" in result:
                success_count += 1

        total_modules = len(initialization_results)
        success_rate = (success_count / total_modules) * 100 if total_modules > 0 else 0

        logger.info("=" * 70)
        logger.info(
            f"üìä MODULES INITIALIZED: {success_count}/{total_modules} ({success_rate:.1f}%)"
        )
        logger.info("=" * 70)

        # Mise √† jour √©tat global
        self.global_state["initialization"] = {
            "timestamp": datetime.now().isoformat(),
            "success_count": success_count,
            "total_modules": total_modules,
            "success_rate": success_rate,
            "results": initialization_results,
        }

        return success_count >= total_modules * 0.7  # 70% minimum pour succ√®s

    async def execute_coordinated_cycle(self) -> dict[str, Any]:
        """
        Ex√©cute un cycle coordonn√© de tous les modules actifs
        """
        cycle_start = time.time()
        self.cycle_count += 1

        logger.info(f"üîÑ CYCLE #{self.cycle_count} - Mode: {self.current_cycle_mode.value}")

        cycle_results: dict[str, Any] = {}
        operations_this_cycle = 0
        successful_this_cycle = 0

        # === PHASE 1: D√âCISIONS RAPIDES (ZeroIA) ===
        if "zeroia" in self.modules and self.modules["zeroia"].status != ModuleStatus.OFFLINE:
            try:
                zeroia_module = self.modules["zeroia"]
                decision, confidence = await asyncio.to_thread(
                    zeroia_module.instance.run_decision_cycle
                )

                cycle_results["zeroia"] = {
                    "decision": decision,
                    "confidence": confidence,
                    "status": "success",
                }

                zeroia_module.update_success()
                successful_this_cycle += 1

            except Exception as e:
                logger.error(f"‚ùå ZeroIA error: {e}")
                self.modules["zeroia"].update_error(str(e))
                cycle_results["zeroia"] = {"status": "error", "error": str(e)}

            operations_this_cycle += 1

        # === PHASE 2: MONITORING SYST√àME (ReflexIA) ===
        if "reflexia" in self.modules and self.modules["reflexia"].status != ModuleStatus.OFFLINE:
            try:
                reflexia_module = self.modules["reflexia"]
                reflexia_result = await asyncio.to_thread(reflexia_module.instance)

                cycle_results["reflexia"] = {
                    "status": reflexia_result["status"],
                    "metrics": reflexia_result["metrics"],
                    "result": "success",
                }

                reflexia_module.update_success()
                successful_this_cycle += 1

            except Exception as e:
                logger.error(f"‚ùå ReflexIA error: {e}")
                self.modules["reflexia"].update_error(str(e))
                cycle_results["reflexia"] = {"result": "error", "error": str(e)}

            operations_this_cycle += 1

        # === PHASE 3: INTELLIGENCE CROIS√âE (SandozIA) ===
        if (
            "sandozia" in self.modules
            and self.modules["sandozia"].status != ModuleStatus.OFFLINE
            and self.current_cycle_mode in [CycleMode.NORMAL, CycleMode.DEEP_ANALYSIS]
        ):
            try:
                sandozia_module = self.modules["sandozia"]
                sandozia_status = sandozia_module.instance.get_current_status()

                cycle_results["sandozia"] = {
                    "coherence_score": sandozia_status.get("coherence_score", 0.0),
                    "active_correlations": sandozia_status.get("active_correlations", 0),
                    "result": "success",
                }

                sandozia_module.update_success()
                successful_this_cycle += 1

            except Exception as e:
                logger.error(f"‚ùå SandozIA error: {e}")
                self.modules["sandozia"].update_error(str(e))
                cycle_results["sandozia"] = {"result": "error", "error": str(e)}

            operations_this_cycle += 1

        # === PHASE 4: COORDINATION T√ÇCHES (TaskIA) ===
        if (
            "taskia" in self.modules
            and self.modules["taskia"].status != ModuleStatus.OFFLINE
            and self.current_cycle_mode != CycleMode.URGENT
        ):
            try:
                taskia_module = self.modules["taskia"]

                # Construire contexte pour TaskIA
                task_context = {
                    "cycle_mode": self.current_cycle_mode.value,
                    "cycle_count": self.cycle_count,
                    "global_state": self.global_state,
                    "zeroia_result": cycle_results.get("zeroia", {}),
                    "reflexia_result": cycle_results.get("reflexia", {}),
                }

                taskia_result = await asyncio.to_thread(taskia_module.instance, task_context)

                cycle_results["taskia"] = {
                    "analysis": taskia_result,
                    "result": "success",
                }

                taskia_module.update_success()
                successful_this_cycle += 1

            except Exception as e:
                logger.error(f"‚ùå TaskIA error: {e}")
                self.modules["taskia"].update_error(str(e))
                cycle_results["taskia"] = {"result": "error", "error": str(e)}

            operations_this_cycle += 1

        # === PHASE 5: SIGNAUX & INTERPR√âTATION (NyxalIA) ===
        if (
            "nyxalia" in self.modules
            and self.modules["nyxalia"].status != ModuleStatus.OFFLINE
            and self.current_cycle_mode == CycleMode.DEEP_ANALYSIS
        ):
            try:
                nyxalia_module = self.modules["nyxalia"]

                # Signal bas√© sur l'√©tat du cycle
                cycle_signal = "start" if self.cycle_count <= 3 else "ping"
                signal_result = await asyncio.to_thread(nyxalia_module.instance, cycle_signal)

                cycle_results["nyxalia"] = {
                    "signal": cycle_signal,
                    "interpretation": signal_result,
                    "result": "success",
                }

                nyxalia_module.update_success()
                successful_this_cycle += 1

            except Exception as e:
                logger.error(f"‚ùå NyxalIA error: {e}")
                self.modules["nyxalia"].update_error(str(e))
                cycle_results["nyxalia"] = {"result": "error", "error": str(e)}

            operations_this_cycle += 1

        # === MISE √Ä JOUR STATISTIQUES ===
        cycle_duration = time.time() - cycle_start
        self.total_operations += operations_this_cycle
        self.successful_operations += successful_this_cycle
        self.failed_operations += operations_this_cycle - successful_this_cycle

        # === ADAPTATION CYCLE MODE ===
        await self._adapt_cycle_mode(cycle_results, successful_this_cycle, operations_this_cycle)

        # === R√âSULTAT CYCLE ===
        cycle_summary = {
            "cycle_number": self.cycle_count,
            "cycle_mode": self.current_cycle_mode.value,
            "duration_seconds": round(cycle_duration, 3),
            "operations_executed": operations_this_cycle,
            "operations_successful": successful_this_cycle,
            "success_rate": (
                round(successful_this_cycle / operations_this_cycle * 100, 1)
                if operations_this_cycle > 0
                else 0
            ),
            "modules_results": cycle_results,
            "timestamp": datetime.now().isoformat(),
        }

        logger.info(
            f"‚úÖ CYCLE #{self.cycle_count} COMPLETED - "
            f"Success: {successful_this_cycle}/{operations_this_cycle} "
            f"({cycle_summary['success_rate']}%) - "
            f"Duration: {cycle_duration:.3f}s"
        )

        return cycle_summary

    async def _adapt_cycle_mode(self, cycle_results: dict, successful: int, total: int):
        """
        Adapte intelligemment le mode de cycle selon les r√©sultats
        """
        if total == 0:
            return

        success_rate = successful / total

        # V√©rifier s'il y a des erreurs critiques
        critical_errors = False
        for module_result in cycle_results.values():
            if module_result.get("result") == "error" or module_result.get("status") == "error":
                critical_errors = True
                break

        # Logique d'adaptation
        if critical_errors or success_rate < 0.5:
            # Erreurs critiques -> Mode URGENT
            if self.current_cycle_mode != CycleMode.URGENT:
                self.current_cycle_mode = CycleMode.URGENT
                logger.warning("‚ö†Ô∏è Switching to URGENT mode due to critical errors")

        elif success_rate < 0.8:
            # Performance d√©grad√©e -> Mode NORMAL
            if self.current_cycle_mode not in [CycleMode.URGENT, CycleMode.NORMAL]:
                self.current_cycle_mode = CycleMode.NORMAL
                logger.info("üìä Switching to NORMAL mode due to degraded performance")

        elif success_rate >= 0.95 and self.cycle_count % 10 == 0:
            # Excellente performance + cycle multiple de 10 -> Mode DEEP_ANALYSIS
            if self.current_cycle_mode != CycleMode.DEEP_ANALYSIS:
                self.current_cycle_mode = CycleMode.DEEP_ANALYSIS
                logger.info("üß† Switching to DEEP_ANALYSIS mode - excellent performance")

        elif self.cycle_count % 60 == 0:  # Toutes les 60 cycles
            # Maintenance p√©riodique
            if self.current_cycle_mode != CycleMode.MAINTENANCE:
                self.current_cycle_mode = CycleMode.MAINTENANCE
                logger.info("üîß Switching to MAINTENANCE mode - periodic maintenance")

    async def run_orchestration(self) -> None:
        """
        Lance l'orchestration principale en mode daemon
        """
        if self.is_running:
            logger.warning("‚ö†Ô∏è Orchestration already running")
            return

        logger.info("üöÄ Starting Arkalia Master Orchestration...")

        # Initialiser modules
        init_success = await self.initialize_modules()
        if not init_success:
            logger.error("‚ùå Module initialization failed - aborting orchestration")
            return

        self.is_running = True

        # Lancer health check en background
        self.health_check_task = asyncio.create_task(self._health_check_loop())

        try:
            while self.is_running:
                # Ex√©cuter cycle coordonn√©
                cycle_result = await self.execute_coordinated_cycle()

                # Sauvegarder √©tat
                await self._save_global_state(cycle_result)

                # Attendre selon le mode de cycle
                sleep_duration = self.config.cycle_intervals[self.current_cycle_mode]
                await asyncio.sleep(sleep_duration)

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Orchestration stopped by user")
        except Exception as e:
            logger.error(f"üí• Orchestration error: {e}")
        finally:
            await self._cleanup()

    async def _health_check_loop(self):
        """Boucle de health check en background"""
        while self.is_running:
            try:
                await self._perform_health_checks()
                await asyncio.sleep(self.config.health_check_interval)
            except Exception as e:
                logger.error(f"‚ùå Health check error: {e}")

    async def _perform_health_checks(self):
        """V√©rifie la sant√© de tous les modules"""
        for _module_name, module_wrapper in self.modules.items():
            # Logique de health check sp√©cifique √† chaque module
            if module_wrapper.error_count > 10:
                module_wrapper.status = ModuleStatus.CRITICAL
            elif module_wrapper.error_count > 5:
                module_wrapper.status = ModuleStatus.DEGRADED
            elif (
                module_wrapper.last_execution
                and (datetime.now() - module_wrapper.last_execution).total_seconds() > 300
            ):  # 5 minutes
                module_wrapper.status = ModuleStatus.OFFLINE

    async def _save_global_state(self, cycle_result: dict):
        """Sauvegarde l'√©tat global"""
        try:
            uptime = time.time() - self.start_time

            state = {
                "orchestrator": {
                    "version": "4.0.0",
                    "uptime_seconds": uptime,
                    "cycle_count": self.cycle_count,
                    "current_mode": self.current_cycle_mode.value,
                    "total_operations": self.total_operations,
                    "successful_operations": self.successful_operations,
                    "failed_operations": self.failed_operations,
                    "success_rate": (
                        round(self.successful_operations / self.total_operations * 100, 2)
                        if self.total_operations > 0
                        else 0
                    ),
                },
                "modules": {
                    name: {
                        "status": wrapper.status.value,
                        "execution_count": wrapper.execution_count,
                        "error_count": wrapper.error_count,
                        "last_execution": (
                            wrapper.last_execution.isoformat() if wrapper.last_execution else None
                        ),
                        "last_error": wrapper.last_error,
                    }
                    for name, wrapper in self.modules.items()
                },
                "last_cycle": cycle_result,
                "timestamp": datetime.now().isoformat(),
            }

            # Cr√©er r√©pertoire si n√©cessaire
            self.config.state_file.parent.mkdir(parents=True, exist_ok=True)

            # Sauvegarder
            with open(self.config.state_file, "w") as f:
                toml.dump(state, f)

        except Exception as e:
            logger.error(f"‚ùå Error saving global state: {e}")

    async def _cleanup(self):
        """Nettoyage final"""
        self.is_running = False

        if self.health_check_task:
            self.health_check_task.cancel()

        logger.info("üßπ Arkalia Master Orchestrator cleanup completed")

    def get_status(self) -> dict[str, Any]:
        """Retourne le statut complet de l'orchestrateur"""
        uptime = time.time() - self.start_time

        return {
            "orchestrator": {
                "version": "4.0.0",
                "is_running": self.is_running,
                "uptime_seconds": uptime,
                "cycle_count": self.cycle_count,
                "current_mode": self.current_cycle_mode.value,
                "total_operations": self.total_operations,
                "success_rate": (
                    round(self.successful_operations / self.total_operations * 100, 2)
                    if self.total_operations > 0
                    else 0
                ),
            },
            "modules": {
                name: {
                    "status": wrapper.status.value,
                    "execution_count": wrapper.execution_count,
                    "error_count": wrapper.error_count,
                }
                for name, wrapper in self.modules.items()
            },
            "config": {
                "enabled_modules": self.config.enabled_modules,
                "cycle_intervals": {
                    mode.value: interval for mode, interval in self.config.cycle_intervals.items()
                },
            },
            "timestamp": datetime.now().isoformat(),
        }


# === FONCTIONS UTILITAIRES ===


async def orchestrate_full_ecosystem(
    config: OrchestratorConfig | None = None, max_cycles: int | None = None
) -> None:
    """
    Lance l'orchestration compl√®te de l'√©cosyst√®me Arkalia

    Args:
        config: Configuration personnalis√©e
        max_cycles: Nombre max de cycles (None = infini)
    """
    orchestrator = ArkaliaOrchestrator(config)

    try:
        if max_cycles:
            # Mode test avec nombre limit√© de cycles
            await orchestrator.initialize_modules()
            for i in range(max_cycles):
                await orchestrator.execute_coordinated_cycle()
                logger.info(f"Cycle {i+1}/{max_cycles} completed")

                # Attendre selon le mode
                sleep_duration = orchestrator.config.cycle_intervals[
                    orchestrator.current_cycle_mode
                ]
                await asyncio.sleep(sleep_duration)
        else:
            # Mode production infini
            await orchestrator.run_orchestration()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Orchestration stopped by user")
    except Exception as e:
        logger.error(f"üí• Orchestration failed: {e}")
        raise


# === POINT D'ENTR√âE CLI ===


async def main():
    """Point d'entr√©e principal pour CLI"""
    import argparse

    parser = argparse.ArgumentParser(description="Arkalia Master Orchestrator v4.0.0")
    parser.add_argument(
        "--mode",
        choices=["daemon", "test", "status"],
        default="daemon",
        help="Mode d'ex√©cution",
    )
    parser.add_argument("--cycles", type=int, help="Nombre de cycles (mode test)")
    parser.add_argument("--config", type=str, help="Fichier config personnalis√©")
    parser.add_argument("--verbose", action="store_true", help="Logs d√©taill√©s")

    args = parser.parse_args()

    # Configuration logging
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=log_level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%H:%M:%S",
    )

    # Configuration
    config = OrchestratorConfig()
    if args.config:
        # Charger config personnalis√©e
        try:
            with open(args.config) as f:
                toml.load(f)
                # Merge avec config par d√©faut
                # TODO: Impl√©menter merge intelligent
        except Exception as e:
            logger.error(f"‚ùå Error loading config: {e}")
            return

    ark_logger.info("üåï ARKALIA MASTER ORCHESTRATOR v4.0.0", extra={"module": "arkalia_master"})
    ark_logger.info("=" * 60, extra={"module": "arkalia_master"})
    ark_logger.info("üß† 10 Modules IA Coordonn√©s", extra={"module": "arkalia_master"})
    ark_logger.info("üîÑ Cycles Adaptatifs Intelligents", extra={"module": "arkalia_master"})
    ark_logger.info("üõ°Ô∏è Circuit Breaker Global", extra={"module": "arkalia_master"})
    ark_logger.info("üåê Global State Master", extra={"module": "arkalia_master"})
    ark_logger.info("=" * 60, extra={"module": "arkalia_master"})

    try:
        if args.mode == "daemon":
            await orchestrate_full_ecosystem(config)
        elif args.mode == "test":
            cycles = args.cycles or 5
            await orchestrate_full_ecosystem(config, max_cycles=cycles)
        elif args.mode == "status":
            orchestrator = ArkaliaOrchestrator(config)
            status = orchestrator.get_status()
            ark_logger.info("\nüìä ORCHESTRATOR STATUS:", extra={"module": "arkalia_master"})
            ark_logger.info("=" * 40, extra={"module": "arkalia_master"})
            for key, value in status.items():
                ark_logger.info(f"{key}: {value}", extra={"module": "arkalia_master"})

    except KeyboardInterrupt:
        ark_logger.info("\n‚èπÔ∏è Stopped by user", extra={"module": "arkalia_master"})
    except Exception as e:
        ark_logger.error(f"\nüí• Error: {e}", extra={"module": "arkalia_master"})
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
