#!/usr/bin/env python3
"""
üè• HealthMonitor - Monitoring intelligent avec watchdogs pr√©serv√©s
üéØ Principe SOLID SRP : Responsabilit√© unique - Surveillance de sant√©
üõ°Ô∏è Pr√©servation des m√©canismes de surveillance critique
"""

import logging
import threading
import time
from collections.abc import Callable
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from typing import Any, Optional


@dataclass
class HealthMetric:
    """M√©trique de sant√©"""

    name: str
    value: Any
    timestamp: datetime
    unit: str = ""
    threshold: float | None = None
    status: str = "ok"


@dataclass
class Alert:
    """Alerte de sant√©"""

    id: str
    message: str
    severity: str  # "low", "medium", "high", "critical"
    timestamp: datetime
    metric: str
    value: Any
    threshold: float | None = None
    resolved: bool = False


class HealthMonitor:
    """
    üéØ Moniteur de sant√© intelligent
    üõ°Ô∏è Pr√©servation des watchdogs critiques
    """

    def __init__(self):
        self.logger = logging.getLogger("arkalia.core.health")
        self._metrics: dict[str, HealthMetric] = {}
        self._alerts: list[Alert] = []
        self._watchdogs: dict[str, Callable] = {}
        self._health_score: float = 1.0
        self._last_check: datetime | None = None
        self._monitoring_thread: threading.Thread | None = None
        self._stop_monitoring = False
        self._initialized = False

        # Initialisation automatique
        self.initialize()

    def initialize(self) -> bool:
        """
        üöÄ Initialisation du moniteur de sant√©
        üõ°Ô∏è Pr√©servation des watchdogs existants
        """
        try:
            self.logger.info("üè• Initialisation HealthMonitor...")

            # Enregistrement des watchdogs par d√©faut
            self._register_default_watchdogs()

            # D√©marrage du monitoring en arri√®re-plan
            self._start_monitoring_thread()

            self._initialized = True
            self.logger.info("‚úÖ HealthMonitor initialis√© avec succ√®s")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation HealthMonitor : {e}")
            return False

    def _register_default_watchdogs(self) -> None:
        """Enregistrement des watchdogs par d√©faut"""
        # Watchdog Reflexia Panic-Check (pr√©serv√©)
        self.register_watchdog("reflexia_panic", self._reflexia_panic_check)

        # Watchdog ZeroIA Circuit Breaker (pr√©serv√©)
        self.register_watchdog("zeroia_circuit", self._zeroia_circuit_check)

        # Watchdog Sandozia Anomaly Detection (pr√©serv√©)
        self.register_watchdog("sandozia_anomaly", self._sandozia_anomaly_check)

        # Watchdog syst√®me g√©n√©ral
        self.register_watchdog("system_health", self._system_health_check)

        self.logger.info(f"üõ°Ô∏è {len(self._watchdogs)} watchdogs enregistr√©s")

    def _reflexia_panic_check(self) -> dict[str, Any]:
        """Watchdog Reflexia Panic-Check (pr√©serv√©)"""
        try:
            # Simulation du check Reflexia (√† remplacer par l'appel r√©el)
            panic_level = 0.1  # Normalement r√©cup√©r√© depuis Reflexia
            threshold = 0.8

            return {
                "status": "ok" if panic_level < threshold else "critical",
                "panic_level": panic_level,
                "threshold": threshold,
                "message": (
                    "Reflexia panic check normal" if panic_level < threshold else "PANIC DETECTED"
                ),
            }
        except Exception as e:
            return {"status": "error", "message": f"Erreur panic check: {e}"}

    def _zeroia_circuit_check(self) -> dict[str, Any]:
        """Watchdog ZeroIA Circuit Breaker (pr√©serv√©)"""
        try:
            # Simulation du check ZeroIA (√† remplacer par l'appel r√©el)
            failure_count = 0  # Normalement r√©cup√©r√© depuis ZeroIA
            threshold = 5

            return {
                "status": "ok" if failure_count < threshold else "open",
                "failure_count": failure_count,
                "threshold": threshold,
                "message": (
                    "Circuit breaker closed"
                    if failure_count < threshold
                    else "Circuit breaker OPEN"
                ),
            }
        except Exception as e:
            return {"status": "error", "message": f"Erreur circuit check: {e}"}

    def _sandozia_anomaly_check(self) -> dict[str, Any]:
        """Watchdog Sandozia Anomaly Detection (pr√©serv√©)"""
        try:
            # Simulation du check Sandozia (√† remplacer par l'appel r√©el)
            anomaly_score = 0.2  # Normalement r√©cup√©r√© depuis Sandozia
            threshold = 0.7

            return {
                "status": "ok" if anomaly_score < threshold else "anomaly",
                "anomaly_score": anomaly_score,
                "threshold": threshold,
                "message": (
                    "No anomalies detected" if anomaly_score < threshold else "ANOMALY DETECTED"
                ),
            }
        except Exception as e:
            return {"status": "error", "message": f"Erreur anomaly check: {e}"}

    def _system_health_check(self) -> dict[str, Any]:
        """Watchdog syst√®me g√©n√©ral"""
        try:
            import psutil

            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage("/")

            # Seuils critiques
            cpu_critical = cpu_percent > 90
            memory_critical = memory.percent > 85
            disk_critical = disk.percent > 90

            status = "ok"
            if cpu_critical or memory_critical or disk_critical:
                status = "critical"
            elif cpu_percent > 70 or memory.percent > 70:
                status = "warning"

            return {
                "status": status,
                "cpu_percent": cpu_percent,
                "memory_percent": memory.percent,
                "disk_percent": disk.percent,
                "message": f"System health: CPU {cpu_percent}%, RAM {memory.percent}%, Disk {disk.percent}%",
            }
        except ImportError:
            return {"status": "ok", "message": "psutil not available, system check skipped"}
        except Exception as e:
            return {"status": "error", "message": f"Erreur system check: {e}"}

    def register_watchdog(self, name: str, watchdog_func: Callable) -> bool:
        """
        üõ°Ô∏è Enregistrement d'un watchdog
        :param name: Nom du watchdog
        :param watchdog_func: Fonction de surveillance
        :return: True si enregistrement r√©ussi
        """
        try:
            self._watchdogs[name] = watchdog_func
            self.logger.info(f"üõ°Ô∏è Watchdog enregistr√© : {name}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enregistrement watchdog {name}: {e}")
            return False

    def unregister_watchdog(self, name: str) -> bool:
        """
        üóëÔ∏è D√©senregistrement d'un watchdog
        :param name: Nom du watchdog
        :return: True si d√©senregistrement r√©ussi
        """
        try:
            if name in self._watchdogs:
                del self._watchdogs[name]
                self.logger.info(f"üóëÔ∏è Watchdog d√©senregistr√© : {name}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©senregistrement watchdog {name}: {e}")
            return False

    def run_watchdogs(self) -> dict[str, dict[str, Any]]:
        """
        üõ°Ô∏è Ex√©cution de tous les watchdogs
        :return: R√©sultats des watchdogs
        """
        results = {}

        for name, watchdog_func in self._watchdogs.items():
            try:
                result = watchdog_func()
                results[name] = result

                # Gestion des alertes automatiques
                if result.get("status") in ["critical", "error"]:
                    self._create_alert(name, result)

            except Exception as e:
                error_result = {"status": "error", "message": f"Exception in {name}: {e}"}
                results[name] = error_result
                self._create_alert(name, error_result)

        return results

    def _create_alert(self, watchdog_name: str, result: dict[str, Any]) -> None:
        """Cr√©ation automatique d'alerte"""
        alert = Alert(
            id=f"{watchdog_name}_{int(time.time())}",
            message=result.get("message", f"Watchdog {watchdog_name} alert"),
            severity="critical" if result.get("status") == "critical" else "high",
            timestamp=datetime.now(),
            metric=watchdog_name,
            value=result,
        )
        self._alerts.append(alert)
        self.logger.warning(f"üö® Alerte cr√©√©e : {alert.message}")

    def check_health(self) -> dict[str, Any]:
        """
        üè• V√©rification de sant√© g√©n√©rale
        :return: Dictionnaire avec statut et m√©triques
        """
        if not self._initialized:
            return {"status": "uninitialized", "message": "HealthMonitor non initialis√©"}

        # Ex√©cution des watchdogs
        watchdog_results = self.run_watchdogs()

        # Calcul du score de sant√©
        self._calculate_health_score(watchdog_results)

        # Mise √† jour du timestamp
        self._last_check = datetime.now()

        return {
            "status": (
                "healthy"
                if self._health_score > 0.7
                else "degraded"
                if self._health_score > 0.3
                else "critical"
            ),
            "health_score": self._health_score,
            "last_check": self._last_check.isoformat() if self._last_check else None,
            "watchdogs": watchdog_results,
            "alerts_count": len([a for a in self._alerts if not a.resolved]),
            "metrics_count": len(self._metrics),
        }

    def _calculate_health_score(self, watchdog_results: dict[str, dict[str, Any]]) -> None:
        """Calcul du score de sant√©"""
        total_watchdogs = len(watchdog_results)
        if total_watchdogs == 0:
            self._health_score = 1.0
            return

        healthy_count = 0
        for result in watchdog_results.values():
            if result.get("status") == "ok":
                healthy_count += 1
            elif result.get("status") == "warning":
                healthy_count += 0.5

        self._health_score = healthy_count / total_watchdogs

    def is_healthy(self) -> bool:
        """
        ‚úÖ √âtat de sant√© global
        :return: True si le syst√®me est en bonne sant√©
        """
        return self._health_score > 0.7

    def get_health_score(self) -> float:
        """
        üìä Score de sant√© (0.0 √† 1.0)
        :return: Score num√©rique de sant√©
        """
        return self._health_score

    def get_metrics(self) -> dict[str, Any]:
        """
        üìä R√©cup√©ration des m√©triques de sant√©
        :return: M√©triques d√©taill√©es
        """
        return {name: asdict(metric) for name, metric in self._metrics.items()}

    def get_alerts(self) -> list[dict[str, Any]]:
        """
        üö® R√©cup√©ration des alertes actives
        :return: Liste des alertes
        """
        return [asdict(alert) for alert in self._alerts if not alert.resolved]

    def clear_alerts(self) -> bool:
        """
        üßπ Nettoyage des alertes
        :return: True si nettoyage r√©ussi
        """
        try:
            self._alerts.clear()
            self.logger.info("üßπ Alertes nettoy√©es")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erreur nettoyage alertes : {e}")
            return False

    def _start_monitoring_thread(self) -> None:
        """D√©marrage du thread de monitoring"""
        if self._monitoring_thread and self._monitoring_thread.is_alive():
            return

        self._stop_monitoring = False
        self._monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self._monitoring_thread.start()
        self.logger.info("üîÑ Thread de monitoring d√©marr√©")

    def _monitoring_loop(self) -> None:
        """Boucle de monitoring en arri√®re-plan"""
        while not self._stop_monitoring:
            try:
                # Ex√©cution des watchdogs toutes les 30 secondes
                self.run_watchdogs()
                time.sleep(30)
            except Exception as e:
                self.logger.error(f"‚ùå Erreur boucle monitoring : {e}")
                time.sleep(60)  # Pause plus longue en cas d'erreur

    def shutdown(self) -> bool:
        """
        üîå Arr√™t propre du HealthMonitor
        :return: True si arr√™t r√©ussi
        """
        try:
            self._stop_monitoring = True
            if self._monitoring_thread and self._monitoring_thread.is_alive():
                self._monitoring_thread.join(timeout=5)

            self.logger.info("üîå HealthMonitor arr√™t√©")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erreur arr√™t HealthMonitor : {e}")
            return False

    def health_check(self) -> dict[str, Any]:
        """
        üè• V√©rification de sant√© du HealthMonitor lui-m√™me
        :return: Statut de sant√©
        """
        return {
            "module": "health_monitor",
            "status": "healthy" if self._initialized else "uninitialized",
            "watchdogs_count": len(self._watchdogs),
            "alerts_count": len(self._alerts),
            "health_score": self._health_score,
            "monitoring_active": self._monitoring_thread and self._monitoring_thread.is_alive(),
        }


# Instance par d√©faut
default_health_monitor = HealthMonitor()
