#!/usr/bin/env python3
"""
‚öñÔ∏è Load Balancer - √âquilibrage de charge intelligent
üéØ Distribution optimale des requ√™tes entre les modules
"""

import logging
import random
import time
from collections.abc import Callable
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from statistics import mean, median
from typing import Any, Optional

logger = logging.getLogger(__name__)


class LoadBalancingStrategy(Enum):
    """Strat√©gies d'√©quilibrage de charge"""

    ROUND_ROBIN = "round_robin"
    WEIGHTED_ROUND_ROBIN = "weighted_round_robin"
    LEAST_CONNECTIONS = "least_connections"
    WEIGHTED_LEAST_CONNECTIONS = "weighted_least_connections"
    RESPONSE_TIME = "response_time"
    ADAPTIVE = "adaptive"


@dataclass
class BackendNode:
    """N≈ìud backend avec m√©triques"""

    id: str
    name: str
    weight: int = 1
    max_connections: int = 100
    current_connections: int = 0
    response_time: float = 0.0
    error_rate: float = 0.0
    health_score: float = 1.0
    last_health_check: datetime = field(default_factory=datetime.now)
    is_healthy: bool = True
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0

    def update_metrics(self, response_time: float, success: bool) -> None:
        """Met √† jour les m√©triques du n≈ìud"""
        self.response_time = response_time
        self.total_requests += 1

        if success:
            self.successful_requests += 1
        else:
            self.failed_requests += 1

        # Calculer le taux d'erreur
        self.error_rate = (
            self.failed_requests / self.total_requests if self.total_requests > 0 else 0.0
        )

        # Calculer le score de sant√©
        self.health_score = max(0.0, 1.0 - self.error_rate - (self.response_time / 1000.0))

    def increment_connections(self) -> bool:
        """Incr√©mente le nombre de connexions actives"""
        if self.current_connections < self.max_connections:
            self.current_connections += 1
            return True
        return False

    def decrement_connections(self) -> None:
        """D√©cr√©mente le nombre de connexions actives"""
        self.current_connections = max(0, self.current_connections - 1)

    def to_dict(self) -> dict[str, Any]:
        """Convertit en dictionnaire"""
        return {
            "id": self.id,
            "name": self.name,
            "weight": self.weight,
            "max_connections": self.max_connections,
            "current_connections": self.current_connections,
            "response_time": self.response_time,
            "error_rate": self.error_rate,
            "health_score": self.health_score,
            "is_healthy": self.is_healthy,
            "total_requests": self.total_requests,
            "successful_requests": self.successful_requests,
            "failed_requests": self.failed_requests,
            "last_health_check": self.last_health_check.isoformat(),
        }


class LoadBalancer:
    """
    ‚öñÔ∏è √âquilibreur de charge intelligent
    üéØ Distribution optimale avec monitoring en temps r√©el
    """

    def __init__(self, strategy: LoadBalancingStrategy = LoadBalancingStrategy.ADAPTIVE):
        self.strategy = strategy
        self.backends: list[BackendNode] = []
        self.current_index = 0
        self.metrics = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "average_response_time": 0.0,
        }

        # Configuration
        self.config = {
            "health_check_interval": 30,  # secondes
            "response_time_threshold": 1000,  # ms
            "error_rate_threshold": 0.1,  # 10%
            "adaptive_weight_factor": 0.1,
        }

        logger.info(f"‚öñÔ∏è LoadBalancer initialis√© avec strat√©gie: {strategy.value}")

    def add_backend(self, backend: BackendNode) -> bool:
        """Ajoute un backend √† l'√©quilibreur"""
        try:
            # V√©rifier si le backend existe d√©j√†
            if any(b.id == backend.id for b in self.backends):
                logger.warning(f"‚ö†Ô∏è Backend d√©j√† existant: {backend.id}")
                return False

            self.backends.append(backend)
            logger.info(f"‚úÖ Backend ajout√©: {backend.name} ({backend.id})")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur ajout backend: {e}")
            return False

    def remove_backend(self, backend_id: str) -> bool:
        """Supprime un backend de l'√©quilibreur"""
        try:
            for i, backend in enumerate(self.backends):
                if backend.id == backend_id:
                    del self.backends[i]
                    logger.info(f"‚úÖ Backend supprim√©: {backend_id}")
                    return True

            logger.warning(f"‚ö†Ô∏è Backend non trouv√©: {backend_id}")
            return False

        except Exception as e:
            logger.error(f"‚ùå Erreur suppression backend: {e}")
            return False

    def get_backend(self) -> BackendNode | None:
        """S√©lectionne un backend selon la strat√©gie"""
        if not self.backends:
            logger.warning("‚ö†Ô∏è Aucun backend disponible")
            return None

        # Filtrer les backends sains
        healthy_backends = [b for b in self.backends if b.is_healthy]
        if not healthy_backends:
            logger.error("‚ùå Aucun backend sain disponible")
            return None

        # S√©lectionner selon la strat√©gie
        if self.strategy == LoadBalancingStrategy.ROUND_ROBIN:
            return self._round_robin(healthy_backends)
        elif self.strategy == LoadBalancingStrategy.WEIGHTED_ROUND_ROBIN:
            return self._weighted_round_robin(healthy_backends)
        elif self.strategy == LoadBalancingStrategy.LEAST_CONNECTIONS:
            return self._least_connections(healthy_backends)
        elif self.strategy == LoadBalancingStrategy.WEIGHTED_LEAST_CONNECTIONS:
            return self._weighted_least_connections(healthy_backends)
        elif self.strategy == LoadBalancingStrategy.RESPONSE_TIME:
            return self._response_time(healthy_backends)
        elif self.strategy == LoadBalancingStrategy.ADAPTIVE:
            return self._adaptive(healthy_backends)
        else:
            return self._round_robin(healthy_backends)

    def execute_request(self, request_func: Callable, *args, **kwargs) -> Any:
        """Ex√©cute une requ√™te via l'√©quilibreur de charge"""
        backend = self.get_backend()
        if not backend:
            raise Exception("Aucun backend disponible")

        start_time = time.time()
        success = False

        try:
            # Incr√©menter les connexions
            if not backend.increment_connections():
                raise Exception(f"Backend {backend.id} au maximum de connexions")

            # Ex√©cuter la requ√™te
            result = request_func(*args, **kwargs)
            success = True
            return result

        except Exception as e:
            logger.error(f"‚ùå Erreur requ√™te backend {backend.id}: {e}")
            raise

        finally:
            # Mettre √† jour les m√©triques
            response_time = (time.time() - start_time) * 1000  # ms
            backend.update_metrics(response_time, success)
            backend.decrement_connections()

            # Mettre √† jour les m√©triques globales
            self.metrics["total_requests"] += 1
            if success:
                self.metrics["successful_requests"] += 1
            else:
                self.metrics["failed_requests"] += 1

            # Mettre √† jour le temps de r√©ponse moyen
            total_successful = self.metrics["successful_requests"]
            if total_successful > 0:
                self.metrics["average_response_time"] = (
                    self.metrics["average_response_time"] * (total_successful - 1) + response_time
                ) / total_successful

    def health_check(self) -> dict[str, Any]:
        """Effectue un contr√¥le de sant√© des backends"""
        results = {}

        for backend in self.backends:
            try:
                # V√©rifier les m√©triques
                is_healthy = (
                    backend.error_rate < self.config["error_rate_threshold"]
                    and backend.response_time < self.config["response_time_threshold"]
                    and backend.health_score > 0.5
                )

                backend.is_healthy = is_healthy
                backend.last_health_check = datetime.now()

                results[backend.id] = {
                    "healthy": is_healthy,
                    "health_score": backend.health_score,
                    "error_rate": backend.error_rate,
                    "response_time": backend.response_time,
                }

                if not is_healthy:
                    logger.warning(
                        f"‚ö†Ô∏è Backend {backend.id} non sain: score={backend.health_score:.2f}"
                    )

            except Exception as e:
                logger.error(f"‚ùå Erreur health check backend {backend.id}: {e}")
                backend.is_healthy = False
                results[backend.id] = {"healthy": False, "error": str(e)}

        return results

    def get_stats(self) -> dict[str, Any]:
        """R√©cup√®re les statistiques de l'√©quilibreur"""
        total_requests = self.metrics["total_requests"]
        success_rate = (
            self.metrics["successful_requests"] / total_requests * 100
            if total_requests > 0
            else 0.0
        )

        return {
            "strategy": self.strategy.value,
            "total_backends": len(self.backends),
            "healthy_backends": len([b for b in self.backends if b.is_healthy]),
            "total_requests": total_requests,
            "successful_requests": self.metrics["successful_requests"],
            "failed_requests": self.metrics["failed_requests"],
            "success_rate": round(success_rate, 2),
            "average_response_time": round(self.metrics["average_response_time"], 2),
            "backends": [b.to_dict() for b in self.backends],
        }

    def _round_robin(self, backends: list[BackendNode]) -> BackendNode:
        """S√©lection round-robin simple"""
        backend = backends[self.current_index % len(backends)]
        self.current_index += 1
        return backend

    def _weighted_round_robin(self, backends: list[BackendNode]) -> BackendNode:
        """S√©lection round-robin pond√©r√©e"""
        # Calculer le poids total
        total_weight = sum(b.weight for b in backends)

        # S√©lectionner selon les poids
        current_weight = 0
        for backend in backends:
            current_weight += backend.weight
            if self.current_index < current_weight:
                self.current_index += 1
                return backend

        # Fallback
        self.current_index += 1
        return backends[0]

    def _least_connections(self, backends: list[BackendNode]) -> BackendNode:
        """S√©lection par nombre de connexions minimal"""
        return min(backends, key=lambda b: b.current_connections)

    def _weighted_least_connections(self, backends: list[BackendNode]) -> BackendNode:
        """S√©lection par nombre de connexions pond√©r√©"""
        return min(backends, key=lambda b: b.current_connections / b.weight)

    def _response_time(self, backends: list[BackendNode]) -> BackendNode:
        """S√©lection par temps de r√©ponse minimal"""
        return min(backends, key=lambda b: b.response_time)

    def _adaptive(self, backends: list[BackendNode]) -> BackendNode:
        """S√©lection adaptative bas√©e sur plusieurs crit√®res"""
        # Calculer un score pour chaque backend
        scores = []
        for backend in backends:
            # Score bas√© sur la sant√©, les connexions et le temps de r√©ponse
            connection_score = 1.0 - (backend.current_connections / backend.max_connections)
            response_score = max(
                0.0, 1.0 - (backend.response_time / self.config["response_time_threshold"])
            )

            # Score combin√©
            score = backend.health_score * 0.4 + connection_score * 0.3 + response_score * 0.3

            scores.append((backend, score))

        # S√©lectionner le backend avec le meilleur score
        best_backend, best_score = max(scores, key=lambda x: x[1])

        # Ajuster les poids de mani√®re adaptative
        for backend, score in scores:
            if score > 0.8:  # Backend performant
                backend.weight = min(backend.weight + self.config["adaptive_weight_factor"], 10)
            elif score < 0.5:  # Backend peu performant
                backend.weight = max(backend.weight - self.config["adaptive_weight_factor"], 1)

        return best_backend


# Instance globale
_load_balancer: LoadBalancer | None = None


def get_load_balancer() -> LoadBalancer:
    """R√©cup√®re l'instance globale du load balancer"""
    global _load_balancer
    if _load_balancer is None:
        _load_balancer = LoadBalancer()
    return _load_balancer


def load_balanced_request():
    """D√©corateur pour ex√©cuter une requ√™te via le load balancer"""

    def decorator(func):
        def wrapper(*args, **kwargs):
            load_balancer = get_load_balancer()
            return load_balancer.execute_request(func, *args, **kwargs)

        return wrapper

    return decorator
