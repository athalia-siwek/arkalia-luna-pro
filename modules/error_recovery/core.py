#!/usr/bin/env python3
"""
üí• Error Recovery System Core - Syst√®me de r√©cup√©ration d'erreurs
D√©tecte et corrige les erreurs dans les modules IA
"""

import asyncio
import logging
from datetime import datetime
from typing import Any, Optional

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ModuleError(BaseModel):
    """Erreur d'un module"""

    module_name: str
    error_type: str
    error_message: str
    timestamp: datetime
    stack_trace: str | None = None
    context: dict = {}


class RecoveryAction(BaseModel):
    """Action de r√©cup√©ration"""

    module_name: str
    action_type: str
    parameters: dict
    timestamp: datetime
    priority: int = 1


class RecoveryResult(BaseModel):
    """R√©sultat d'une r√©cup√©ration"""

    success: bool
    action: RecoveryAction
    error_fixed: bool
    new_state: str
    timestamp: datetime


class ErrorRecoverySystem:
    """Syst√®me de r√©cup√©ration d'erreurs"""

    def __init__(self):
        self.active_errors: dict[str, list[ModuleError]] = {}
        self.recovery_history: list[RecoveryResult] = []
        self.is_running = False
        self.max_retries = 3

    async def register_error(self, error: ModuleError) -> dict:
        """Enregistre une nouvelle erreur"""
        if error.module_name not in self.active_errors:
            self.active_errors[error.module_name] = []

        self.active_errors[error.module_name].append(error)

        # D√©clencher r√©cup√©ration automatique
        action = self._plan_recovery_action(error)
        if action:
            result = await self.execute_recovery(action)
            return {
                "status": "recovery_attempted",
                "success": result.success,
                "action": action.action_type,
            }

        return {"status": "error_registered", "pending_recovery": True}

    def _plan_recovery_action(self, error: ModuleError) -> RecoveryAction | None:
        """Planifie une action de r√©cup√©ration"""
        module_errors = self.active_errors.get(error.module_name, [])

        # Strat√©gies de r√©cup√©ration
        if error.error_type == "connection_lost":
            return RecoveryAction(
                module_name=error.module_name,
                action_type="reconnect",
                parameters={},
                timestamp=datetime.now(),
                priority=2,
            )

        elif error.error_type == "state_corrupted":
            return RecoveryAction(
                module_name=error.module_name,
                action_type="restore_state",
                parameters={"backup_type": "last_known_good"},
                timestamp=datetime.now(),
                priority=3,
            )

        elif error.error_type == "deadlock":
            return RecoveryAction(
                module_name=error.module_name,
                action_type="force_restart",
                parameters={"timeout": 30},
                timestamp=datetime.now(),
                priority=1,
            )

        # Erreurs r√©p√©t√©es = red√©marrage
        if len(module_errors) >= self.max_retries:
            return RecoveryAction(
                module_name=error.module_name,
                action_type="restart",
                parameters={"clean": True},
                timestamp=datetime.now(),
                priority=3,
            )

        return None

    async def execute_recovery(self, action: RecoveryAction) -> RecoveryResult:
        """Ex√©cute une action de r√©cup√©ration"""
        logger.info(f"üîÑ Ex√©cution r√©cup√©ration: {action.module_name} - {action.action_type}")

        try:
            # Simulation des actions (√† remplacer par vraies actions)
            if action.action_type == "reconnect":
                await asyncio.sleep(2)  # Simuler reconnexion
                success = True

            elif action.action_type == "restore_state":
                await asyncio.sleep(3)  # Simuler restauration
                success = True

            elif action.action_type in ["restart", "force_restart"]:
                await asyncio.sleep(5)  # Simuler red√©marrage
                success = True

            else:
                success = False

            # Cr√©er r√©sultat
            result = RecoveryResult(
                success=success,
                action=action,
                error_fixed=success,
                new_state="recovered" if success else "failed",
                timestamp=datetime.now(),
            )

            # Mettre √† jour historique
            self.recovery_history.append(result)

            # Si succ√®s, nettoyer erreurs
            if success:
                self.active_errors[action.module_name] = []

            return result

        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration: {e}")
            return RecoveryResult(
                success=False,
                action=action,
                error_fixed=False,
                new_state="error",
                timestamp=datetime.now(),
            )

    async def run_recovery_loop(self):
        """Boucle principale de r√©cup√©ration"""
        self.is_running = True
        logger.info("üí• D√©marrage boucle de r√©cup√©ration")

        while self.is_running:
            try:
                # V√©rifier erreurs actives
                for _module, errors in self.active_errors.items():
                    if errors:
                        action = self._plan_recovery_action(errors[-1])
                        if action:
                            await self.execute_recovery(action)

                await asyncio.sleep(10)  # Intervalle de v√©rification

            except Exception as e:
                logger.error(f"‚ùå Erreur boucle r√©cup√©ration: {e}")
                await asyncio.sleep(5)


# FastAPI app
app = FastAPI(title="Error Recovery System API")
recovery_system = ErrorRecoverySystem()


@app.post("/error")
async def report_error(error: ModuleError):
    """Signale une erreur pour r√©cup√©ration"""
    try:
        result = await recovery_system.register_error(error)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/recover")
async def force_recovery(action: RecoveryAction):
    """Force une action de r√©cup√©ration"""
    try:
        result = await recovery_system.execute_recovery(action)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/status")
async def get_status():
    """√âtat du syst√®me de r√©cup√©ration"""
    return {
        "status": "running" if recovery_system.is_running else "stopped",
        "active_errors": {
            module: len(errors) for module, errors in recovery_system.active_errors.items()
        },
        "recovery_history": len(recovery_system.recovery_history),
        "last_recovery": (
            recovery_system.recovery_history[-1].dict()
            if recovery_system.recovery_history
            else None
        ),
    }


if __name__ == "__main__":
    import uvicorn

    # D√©marrer la boucle de r√©cup√©ration en arri√®re-plan
    asyncio.create_task(recovery_system.run_recovery_loop())
    # Lancer l'API
    uvicorn.run(app, host="0.0.0.0", port=8017)
