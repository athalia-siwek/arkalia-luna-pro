#!/usr/bin/env python3

"""
üöÄ Lancement du serveur FastAPI et de la boucle r√©flexive pour ReflexIA

Ce script d√©marre :
1. Le serveur FastAPI qui expose les endpoints de ReflexIA
2. La boucle r√©flexive qui surveille le syst√®me en continu

Endpoints expos√©s :
- /health : √âtat de sant√© du service
- /metrics : M√©triques syst√®me
- /status : √âtat actuel du syst√®me
- /snapshot : Dernier snapshot sauvegard√©
"""

import threading

import uvicorn
from fastapi import FastAPI

from modules.reflexia.core import get_metrics, launch_reflexia_check, launch_reflexia_loop

app = FastAPI(
    title="ReflexIA API",
    description="API REST pour le module r√©flexif d'Arkalia",
    version="2.6.0",
)


@app.get("/health")
async def health_check() -> dict:
    """Endpoint de sant√© pour le healthcheck Docker"""
    return {"status": "healthy"}


@app.get("/metrics")
async def get_system_metrics() -> dict:
    """Retourne les m√©triques syst√®me actuelles"""
    return get_metrics()


@app.get("/status")
async def get_system_status() -> dict:
    """Lance une v√©rification r√©flexive et retourne le statut"""
    return launch_reflexia_check()


def run_reflexia_loop() -> None:
    """Lance la boucle r√©flexive dans un thread s√©par√©"""
    launch_reflexia_loop()


if __name__ == "__main__":
    # D√©marrer la boucle r√©flexive dans un thread s√©par√©
    reflexia_thread = threading.Thread(target=run_reflexia_loop)
    reflexia_thread.daemon = True  # Le thread s'arr√™tera quand le programme principal s'arr√™te
    reflexia_thread.start()

    # D√©marrer le serveur FastAPI dans le thread principal
    uvicorn.run(
        app, host="127.0.0.1", port=8002
    )  # nosec B104 - Interface locale pour d√©veloppement
