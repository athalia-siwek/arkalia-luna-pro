# üåê [NGINX PRODUCTION] Zero Downtime Load Balancer - Roadmap S3-P0
# Configuration haute performance pour Arkalia-LUNA

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimisations de performance
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Format de logs am√©lior√© pour observabilit√©
    log_format arkalia_access '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              'rt=$request_time uct="$upstream_connect_time" '
                              'uht="$upstream_header_time" urt="$upstream_response_time" '
                              'upstream="$upstream_addr" '
                              'arkalia_instance="$upstream_http_arkalia_instance"';

    access_log /var/log/nginx/access.log arkalia_access;

    # Optimisations g√©n√©rales
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=2r/s;

    # üéØ Upstream - Pool d'instances Arkalia API
    upstream arkalia_api_pool {
        least_conn;  # Load balancing par connexions

        # Instance primaire (poids plus √©lev√©)
        server arkalia_api_primary:8000 weight=3 max_fails=2 fail_timeout=30s;

        # Instance secondaire (backup actif)
        server arkalia_api_secondary:8000 weight=1 max_fails=2 fail_timeout=30s backup;

        # Health check passif
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # üìä Upstream - Monitoring Stack
    upstream monitoring_pool {
        server prometheus_prod:9090 max_fails=1 fail_timeout=10s;
        server grafana_prod:3000 max_fails=1 fail_timeout=10s;
    }

    # üõ°Ô∏è Security headers map
    map $sent_http_content_type $content_security_policy {
        default "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;";
        ~^application/json "default-src 'none';";
    }

    # üîß Server principal - API Arkalia
    server {
        listen 80;
        listen [::]:80;
        server_name api.arkalia.localhost localhost;

        # Redirection HTTPS (optionnel en prod)
        # return 301 https://$server_name$request_uri;

        # Health check endpoint (bypass upstream)
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # ü§ñ API Arkalia avec load balancing
        location / {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;

            # Headers pour debugging
            add_header X-Arkalia-Instance $upstream_http_arkalia_instance always;
            add_header X-Load-Balancer "nginx-arkalia" always;
            add_header X-Request-ID $request_id always;

            # Security headers
            add_header X-Content-Type-Options nosniff always;
            add_header X-Frame-Options DENY always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Content-Security-Policy $content_security_policy always;

            # Proxy vers pool API
            proxy_pass http://arkalia_api_pool;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 3s;

            # Headers proxy standards
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # Timeouts optimis√©s
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;

            # Buffering pour performance
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            proxy_busy_buffers_size 16k;

            # Keep-alive vers upstream
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # üîê Endpoints d'authentification (rate limit plus strict)
        location ~ ^/(auth|login|token) {
            limit_req zone=auth_limit burst=5 nodelay;

            proxy_pass http://arkalia_api_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts plus courts pour auth
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 10s;
        }

        # üì§ Upload avec limite de taille
        location /upload {
            client_max_body_size 10M;
            proxy_pass http://arkalia_api_pool;
            proxy_request_buffering off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # üìä M√©triques Prometheus (acc√®s direct)
        location /metrics {
            access_log off;
            allow 172.20.0.0/16;  # R√©seau Docker interne
            deny all;

            proxy_pass http://arkalia_api_pool;
            proxy_set_header Host $host;
        }
    }

    # üìä Server monitoring - Grafana/Prometheus
    server {
        listen 80;
        server_name monitoring.arkalia.localhost;

        # üìà Grafana
        location / {
            proxy_pass http://grafana_prod:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support pour Grafana
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # üìä Prometheus
        location /prometheus/ {
            proxy_pass http://prometheus_prod:9090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # üö® AlertManager
        location /alertmanager/ {
            proxy_pass http://alertmanager_prod:9093/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # üîÑ Server pour reload graceful (zero downtime)
    server {
        listen 8080;
        server_name localhost;
        access_log off;

        # Endpoint de reload configuration
        location /reload {
            access_log off;
            allow 172.20.0.0/16;
            deny all;

            content_by_lua_block {
                local success, err = os.execute("nginx -s reload")
                if success then
                    ngx.say("nginx reloaded successfully")
                else
                    ngx.status = 500
                    ngx.say("nginx reload failed: " .. (err or "unknown error"))
                end
            }
        }

        # Status nginx
        location /status {
            access_log off;
            allow 172.20.0.0/16;
            deny all;

            stub_status on;
        }
    }

    # üîê Server HTTPS (configuration TLS)
    # server {
    #     listen 443 ssl http2;
    #     server_name api.arkalia.localhost;
    #
    #     ssl_certificate /etc/nginx/ssl/arkalia.crt;
    #     ssl_certificate_key /etc/nginx/ssl/arkalia.key;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # Configuration identique au server HTTP
    #     location / {
    #         proxy_pass http://arkalia_api_pool;
    #         # ... m√™me configuration proxy
    #     }
    # }

    # Include configurations additionnelles
    include /etc/nginx/conf.d/*.conf;
}
