---
name: 🚀 Deploy Arkalia-LUNA

on:
  push:
    branches: [ main, develop, dev-migration, refonte-stable ]
  pull_request:
    branches: [ main, develop, dev-migration, refonte-stable ]

env:
  PYTHON_VERSION: "3.10"
  DOCKER_REGISTRY: "ghcr.io"
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

# Permissions pour éviter les erreurs de sécurité
permissions:
  contents: read
  packages: write
  actions: read

jobs:
  # 🔍 Validation pré-déploiement
  pre-deploy-validation:
    name: 🔍 Validation Pré-Déploiement
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install mkdocs mkdocs-material

      - name: 🔍 Validate MkDocs configuration
        run: |
          echo "🔍 Validation de la configuration MkDocs..."
          if [ -f "mkdocs.yml" ]; then
            echo "✅ mkdocs.yml trouvé"
            mkdocs build --strict || (echo "❌ mkdocs.yml invalide" && exit 1)
            echo "✅ Configuration MkDocs valide"
          else
            echo "❌ mkdocs.yml manquant"
            exit 1
          fi

      - name: 🔍 Validate Dockerfiles
        run: |
          echo "🔍 Validation des Dockerfiles..."
          chmod +x scripts/validate-dockerfiles.sh
          ./scripts/validate-dockerfiles.sh

      - name: 🕵️ Validate docker-compose
        run: |
          echo "🔍 Validation docker-compose.yml..."
          if [ -f "docker-compose.yml" ]; then
            echo "✅ docker-compose.yml trouvé"
            docker compose config --quiet || (echo "❌ docker-compose.yml invalide" && exit 1)
          else
            echo "❌ docker-compose.yml manquant"
            exit 1
          fi

      - name: 🔍 Validate environment files
        run: |
          echo "🔍 Validation des fichiers d'environnement..."

          # Vérification des variables critiques
          if [ -f ".env.example" ]; then
            echo "✅ .env.example trouvé"
          else
            echo "⚠️ .env.example manquant"
          fi

  # 🐳 Construction Docker
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: pre-deploy-validation
    if: github.event_name == 'push'
    timeout-minutes: 30
    strategy:
      matrix:
        image: [zeroia, reflexia, sandozia, assistantia]
        include:
          - image: zeroia
            dockerfile: Dockerfile.zeroia
          - image: reflexia
            dockerfile: Dockerfile-reflexia
          - image: sandozia
            dockerfile: Dockerfile.sandozia
          - image: assistantia
            dockerfile: Dockerfile.assistantia
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-

      - name: 🐳 Build and push ${{ matrix.image }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.image }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.image }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.image }}:v${{ github.run_number }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: 🔄 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # 🧪 Tests E2E post-build
  e2e:
    name: 🧪 Tests E2E Post-Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    timeout-minutes: 45
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-asyncio requests

      - name: 🐳 Start services for E2E tests
        run: |
          echo "🚀 Démarrage des services pour tests E2E..."
          docker compose up -d --remove-orphans
          sleep 60

      - name: 🏥 Health check services
        run: |
          echo "🏥 Vérification santé des services..."

          # Vérification avec retry
          for service in "8000/health" "8000/zeroia/health" "8000/reflexia/health"; do
            echo "🔍 Vérification $service..."
            for i in {1..10}; do
              if curl -f -s "http://localhost:$service" > /dev/null; then
                echo "✅ $service disponible"
                break
              else
                echo "⏳ Tentative $i/10 - $service non disponible"
                sleep 10
              fi
            done
          done

      - name: 🧪 Run E2E tests
        run: |
          echo "🧪 Exécution des tests E2E..."
          if [ -d "tests/e2e" ]; then
            pytest tests/e2e/ -v --tb=short --timeout=300 || echo "⚠️ Tests E2E terminés avec avertissements"
          else
            echo "📁 Dossier tests/e2e non trouvé"
          fi

      - name: 🐳 Stop services
        if: always()
        run: |
          echo "🛑 Arrêt des services..."
          docker compose down --remove-orphans
          docker system prune -f

  # 🚀 Déploiement Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e]
    if: github.ref == 'refs/heads/dev-migration' && github.event_name == 'push'
    environment: staging
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to staging registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Deploy to staging server
        run: |
          echo "🚀 Déploiement staging sur ${{ github.ref }}"
          echo "📅 Date: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"

          # Ici vous ajouteriez vos commandes de déploiement staging
          # Exemple avec SSH ou autre méthode
          # ssh user@staging-server "cd /app && docker compose pull && docker compose up -d"

          echo "✅ Déploiement staging initié"

      - name: 🏥 Health check staging
        run: |
          echo "🏥 Vérification santé staging..."

          # Attendre le démarrage
          sleep 30

          # Health checks avec retry
          for i in {1..10}; do
            if curl -f -s http://staging.arkalia.ai/health > /dev/null; then
              echo "✅ Staging API disponible"
              break
            else
              echo "⏳ Tentative $i/10 - Staging non disponible"
              sleep 10
            fi
          done

      - name: 📊 Staging smoke tests
        run: |
          echo "📊 Tests de fumée staging..."

          # Tests basiques
          curl -f http://staging.arkalia.ai/health || exit 1
          curl -f http://staging.arkalia.ai/zeroia/health || echo "⚠️ ZeroIA staging non disponible"
          curl -f http://staging.arkalia.ai/reflexia/health || echo "⚠️ ReflexIA staging non disponible"

  # 🚀 Déploiement Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    timeout-minutes: 30
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to production registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Deploy to production server
        run: |
          echo "🚀 Déploiement production sur ${{ github.ref }}"
          echo "📅 Date: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"

          # Ici vous ajouteriez vos commandes de déploiement production
          # Exemple avec blue-green deployment
          # ssh user@prod-server "cd /app && ./deploy.sh blue-green"

          echo "✅ Déploiement production initié"

      - name: 🏥 Health check production
        run: |
          echo "🏥 Vérification santé production..."

          # Attendre le démarrage
          sleep 45

          # Health checks avec retry
          for i in {1..15}; do
            if curl -f -s http://arkalia.ai/health > /dev/null; then
              echo "✅ Production API disponible"
              break
            else
              echo "⏳ Tentative $i/15 - Production non disponible"
              sleep 10
            fi
          done

      - name: 📊 Production smoke tests
        run: |
          echo "📊 Tests de fumée production..."

          # Tests critiques
          curl -f http://arkalia.ai/health || exit 1
          curl -f http://arkalia.ai/zeroia/health || exit 1
          curl -f http://arkalia.ai/reflexia/health || exit 1

          # Tests de performance basiques
          response_time=$(curl -w "%{time_total}" -o /dev/null -s http://arkalia.ai/health)
          echo "⏱️ Temps de réponse: ${response_time}s"

          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "⚠️ Temps de réponse élevé: ${response_time}s"
          fi

      - name: 📊 Post-deployment monitoring
        run: |
          echo "📊 Monitoring post-déploiement..."

          # Vérifications supplémentaires
          echo "🔍 Vérification des métriques..."
          curl -s http://arkalia.ai/metrics | head -20 || echo "⚠️ Métriques non disponibles"

          echo "🔍 Vérification des logs..."
          # Ici vous pourriez vérifier les logs d'erreur

  # 🔄 Rollback automatique
  rollback:
    name: 🔄 Rollback Automatique
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔄 Execute rollback
        run: |
          echo "🔄 Exécution du rollback automatique..."
          echo "📅 Date: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"

          # Ici vous ajouteriez votre logique de rollback
          # Exemple: revenir à la version précédente
          echo "✅ Rollback initié"

      - name: 🏥 Verify rollback
        run: |
          echo "🏥 Vérification du rollback..."
          sleep 30

          # Vérification que le rollback fonctionne
          if curl -f -s http://arkalia.ai/health > /dev/null; then
            echo "✅ Rollback réussi"
          else
            echo "❌ Rollback échoué"
            exit 1
          fi

  # 📊 Rapport de déploiement
  deployment-report:
    name: 📊 Rapport de Déploiement
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, rollback]
    if: always()
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate deployment report
        run: |
          echo "## 🚀 Rapport de Déploiement Arkalia-LUNA" > deployment-report.md
          echo "### 📅 Date: $(date)" >> deployment-report.md
          echo "### 🔗 Commit: ${{ github.sha }}" >> deployment-report.md
          echo "### 🌿 Branche: ${{ github.ref }}" >> deployment-report.md
          echo "### 🏃‍♂️ Event: ${{ github.event_name }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### ✅ Statut des déploiements:" >> deployment-report.md
          echo "- Staging: ${{ needs.deploy-staging.result }}" >> deployment-report.md
          echo "- Production: ${{ needs.deploy-production.result }}" >> deployment-report.md
          echo "- Rollback: ${{ needs.rollback.result }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### 🐳 Images construites:" >> deployment-report.md
          echo "- zeroia: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/zeroia:${{ github.sha }}" >> deployment-report.md
          echo "- reflexia: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/reflexia:${{ github.sha }}" >> deployment-report.md
          echo "- sandozia: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/sandozia:${{ github.sha }}" >> deployment-report.md
          echo "- assistantia: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/assistantia:${{ github.sha }}" >> deployment-report.md

      - name: 📋 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 90

      - name: 🚨 Notify on deployment failure
        if: failure()
        run: |
          echo "❌ Déploiement a échoué sur ${{ github.ref }}"
          echo "🔗 Voir les détails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
