---
name: 🚀 Arkalia-LUNA CI/CD

on:
  push:
    branches: [ main, develop, dev-migration, refonte-stable ]
  pull_request:
    branches: [ main, develop, dev-migration, refonte-stable ]

env:
  PYTHON_VERSION: "3.10"
  COVERAGE_MIN: 28
  SECURITY_COVERAGE_MIN: 10
  PERFORMANCE_COVERAGE_MIN: 10
  CHAOS_COVERAGE_MIN: 10
  # Timeouts pour éviter les jobs bloqués
  TEST_TIMEOUT: 1800  # 30 minutes
  BUILD_TIMEOUT: 900  # 15 minutes

# Permissions globales pour éviter les erreurs de sécurité
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # 🔍 Linting et formatage
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Pour avoir l'historique complet

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'  # Cache des dépendances

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install black isort ruff mypy bandit

      - name: 🧹 Clean generated files
        run: |
          find . -name "._*" -delete
          find . -name ".DS_Store" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete

      - name: 🎨 Check code formatting
        run: |
          echo "🔍 Vérification formatage avec black..."
          black --check --diff . || (echo "❌ Formatage incorrect. Exécutez: black ." && exit 1)

          echo "🔍 Vérification imports avec isort..."
          isort --check-only --diff . || (echo "❌ Imports incorrects. Exécutez: isort ." && exit 1)

      - name: 🔍 Run linting
        run: |
          echo "🔍 Linting avec ruff..."
          ruff check . --output-format=github || exit 1

          echo "🔍 Type checking avec mypy..."
          mypy modules/ --ignore-missing-imports --no-strict-optional || echo "⚠️ Type checking terminé avec avertissements"

      - name: 🔒 Security scan with bandit
        run: |
          echo "🔒 Scan de sécurité avec bandit..."
          bandit -r modules/ -f json -o bandit-report.json || echo "⚠️ Scan de sécurité terminé avec avertissements"

      - name: 📋 Upload linting artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linting-artifacts
          path: |
            bandit-report.json
            .ruff_cache/

  # 🧪 Tests unitaires et d'intégration
  test:
    name: 🧪 Tests Unitaires & Intégration
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]
      fail-fast: false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout

      - name: 🧹 Clean test artifacts
        run: |
          find . -name "._*" -delete
          find . -name ".DS_Store" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          rm -f test-results.xml coverage.xml .coverage
          rm -rf htmlcov/ .pytest_cache/

      - name: 🔍 Verify test environment
        run: |
          echo "🔍 Vérification de l'environnement de test..."
          python --version
          pytest --version
          echo "📁 Tests disponibles:"
          find tests/ -name "test_*.py" | wc -l

      - name: 🧪 Run unit tests with coverage
        run: |
          echo "🧪 Exécution des tests unitaires avec couverture..."
          pytest tests/unit/ \
            --cov=modules \
            --cov=scripts \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.COVERAGE_MIN }} \
            --junitxml=test-results.xml \
            --timeout=300 \
            --tb=short \
            --ignore=modules/generative_ai/generated/ \
            --ignore=modules/security/sandbox/ \
            --ignore=modules/security/watchdog/ \
            --ignore=modules/helloria/main.py \
            --ignore=modules/helloria/state.py \
            --ignore=modules/utils_enhanced/core.py \
            --strict-markers \
            -v

      - name: 📊 Display coverage summary
        run: |
          echo "=== 📊 COUVERTURE DE TESTS ==="
          coverage report --show-missing
          echo "=== 📁 FICHIERS COUVERTURE ==="
          ls -la coverage.xml htmlcov/ || echo "⚠️ Fichiers de couverture non trouvés"

      - name: 🧪 Run integration tests (no coverage check)
        run: |
          echo "🧪 Exécution des tests d'intégration..."
          pytest -c pytest-integration.ini \
            --junitxml=integration-test-results.xml \
            --ignore=modules/generative_ai/generated/ \
            --timeout=300 \
            -v

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results.xml
            integration-test-results.xml
            htmlcov/
            .coverage
            coverage.xml
          retention-days: 30

  # 🔒 Tests de sécurité
  security:
    name: 🔒 Tests de Sécurité
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: 🔒 Run security tests
        run: |
          echo "🔒 Exécution des tests de sécurité..."
          pytest -c pytest-security.ini --timeout=300 || echo "⚠️ Tests de sécurité terminés avec avertissements"

      - name: 🔍 Run bandit security scan
        run: |
          echo "🔍 Scan de sécurité avec bandit..."
          bandit -r modules/ -f json -o bandit-report.json || echo "⚠️ Scan bandit terminé avec avertissements"

      - name: 🔍 Run safety check
        run: |
          echo "🔍 Vérification des vulnérabilités des dépendances..."
          safety check --json --output safety-report.json || echo "⚠️ Safety check terminé avec avertissements"

      - name: 📋 Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 90

  # 🚀 Tests de performance (nightly)
  performance:
    name: 🚀 Tests de Performance
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark

      - name: 🚀 Run performance tests
        run: |
          echo "🚀 Exécution des tests de performance..."
          pytest -c pytest-performance.ini --timeout=600 || echo "⚠️ Tests de performance terminés avec avertissements"

      - name: 📊 Generate performance report
        run: |
          echo "📊 Génération du rapport de performance..."
          python scripts/ark-performance-benchmark.py --report-only || echo "⚠️ Génération du rapport échouée"

      - name: 📋 Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            .benchmarks/
            performance-report.json
          retention-days: 30

  # 🌀 Tests de chaos (nightly)
  chaos:
    name: 🌀 Tests de Chaos
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 25
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🌀 Run chaos tests
        run: |
          echo "🌀 Exécution des tests de chaos..."
          pytest -c pytest-chaos.ini --timeout=900 || echo "⚠️ Tests de chaos terminés avec avertissements"

      - name: 📋 Upload chaos artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chaos-results
          path: |
            chaos_reports/
            chaos_metric_*.toml
          retention-days: 30

  # 📊 Rapport final
  report:
    name: 📊 Rapport Final
    runs-on: ubuntu-latest
    needs: [test, security, performance, chaos]
    if: always()
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 📊 Generate final report
        run: |
          {
            echo "## 🚀 Arkalia-LUNA CI/CD Report"
            echo "### 📅 Date: $(date)"
            echo "### 🔗 Commit: ${{ github.sha }}"
            echo "### 🌿 Branche: ${{ github.ref }}"
            echo "### 🏃‍♂️ Event: ${{ github.event_name }}"
            echo ""
            echo "### ✅ Tests Status"
            echo "- Unit & Integration: ${{ needs.test.result }}"
            echo "- Security: ${{ needs.security.result }}"
            echo "- Performance: ${{ needs.performance.result }}"
            echo "- Chaos: ${{ needs.chaos.result }}"
            echo ""
            echo "### 📈 Coverage: ${{ env.COVERAGE_MIN }}% minimum"
            echo "### ⏱️ Timeouts: Test=${{ env.TEST_TIMEOUT }}s, Build=${{ env.BUILD_TIMEOUT }}s"
            echo ""
            echo "### 📋 Artifacts Generated"
            ls -la artifacts/ || echo "Aucun artifact trouvé"
          } > report.md

      - name: 📋 Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: report.md
          retention-days: 90

      - name: 🚨 Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD a échoué sur ${{ github.ref }}"
          echo "🔗 Voir les détails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 🕵️ Validate mkdocs configuration
        run: |
          echo "🔍 Validation de la configuration MkDocs..."
          python -m pip install --upgrade pip setuptools wheel pipx
          python -m pipx ensurepath
          pipx install mkdocs
          pipx runpip mkdocs install mkdocs-material mkdocs-minify-plugin
          export PATH="$HOME/.local/bin:$PATH"
          if [ -f "mkdocs.yml" ]; then
            echo "✅ mkdocs.yml trouvé"
            mkdocs build --strict || echo "⚠️ mkdocs.yml invalide (non bloquant)"
          else
            echo "⚠️ mkdocs.yml manquant (non bloquant)"
          fi

  # 🐳 Build Docker Images
  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🐳 Build ZeroIA
        run: |
          if [ -f "Dockerfile.zeroia" ]; then
            docker build -f Dockerfile.zeroia -t arkalia-zeroia . || echo "⚠️ Construction ZeroIA échouée"
          else
            echo "⚠️ Dockerfile.zeroia non trouvé"
          fi
      - name: 🐳 Build ReflexIA
        run: |
          if [ -f "Dockerfile.reflexia" ]; then
            docker build -f Dockerfile.reflexia -t arkalia-reflexia . || echo "⚠️ Construction ReflexIA échouée"
          else
            echo "⚠️ Dockerfile.reflexia non trouvé"
          fi
      - name: 🐳 Build Sandozia
        run: |
          if [ -f "Dockerfile.sandozia" ]; then
            docker build -f Dockerfile.sandozia -t arkalia-sandozia . || echo "⚠️ Construction Sandozia échouée"
          else
            echo "⚠️ Dockerfile.sandozia non trouvé"
          fi
      - name: 🐳 Build AssistantIA
        run: |
          if [ -f "Dockerfile.assistantia" ]; then
            docker build -f Dockerfile.assistantia -t arkalia-assistantia . || echo "⚠️ Construction AssistantIA échouée"
          else
            echo "⚠️ Dockerfile.assistantia non trouvé"
          fi
      - name: 🐳 Build Cognitive Reactor
        run: |
          if [ -f "Dockerfile.cognitive-reactor" ]; then
            docker build -f Dockerfile.cognitive-reactor -t arkalia-cognitive-reactor . || echo "⚠️ Construction Cognitive Reactor échouée"
          else
            echo "⚠️ Dockerfile.cognitive-reactor non trouvé"
          fi
      - name: 🐳 Build Generative AI
        run: |
          if [ -f "Dockerfile.generative-ai" ]; then
            docker build -f Dockerfile.generative-ai -t arkalia-generative-ai . || echo "⚠️ Construction Generative AI échouée"
          else
            echo "⚠️ Dockerfile.generative-ai non trouvé"
          fi
      - name: 🐳 Build Master
        run: |
          if [ -f "Dockerfile.master" ]; then
            docker build -f Dockerfile.master -t arkalia-master . || echo "⚠️ Construction Master échouée"
          else
            echo "⚠️ Dockerfile.master non trouvé"
          fi

  # 🧪 Tests E2E
  e2e:
    name: 🧪 Tests E2E
    runs-on: ubuntu-latest
    needs: build-docker
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx aiohttp
      - name: 🐳 Start services (docker-compose)
        run: |
          if [ -f "docker-compose.yml" ]; then
            docker-compose up -d || docker compose up -d || echo "⚠️ Démarrage docker-compose échoué"
            sleep 15
          else
            echo "⚠️ docker-compose.yml non trouvé"
          fi
      - name: 🧪 Run E2E tests
        run: |
          pytest tests/e2e/ --tb=short -v || echo "⚠️ Tests E2E terminés avec des échecs (normal si services non disponibles)"
      - name: 🐳 Stop services
        if: always()
        run: |
          docker-compose down || docker compose down || echo "⚠️ Impossible d'arrêter les services"

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: e2e
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🐳 Deploy to staging
        run: |
          if [ -f "docker-compose.prod.yml" ]; then
            docker-compose -f docker-compose.prod.yml up -d || docker compose -f docker-compose.prod.yml up -d || echo "⚠️ Déploiement staging échoué"
          else
            echo "⚠️ docker-compose.prod.yml non trouvé"
          fi
      - name: 🧹 Clean up
        if: always()
        run: |
          if [ -f "docker-compose.prod.yml" ]; then
            docker-compose -f docker-compose.prod.yml down || docker compose -f docker-compose.prod.yml down || echo "⚠️ Nettoyage staging échoué"
          fi

  # 🏥 Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    timeout-minutes: 5
    steps:
      - name: 🔍 Check API health
        run: |
          curl -f http://localhost:8000/health || echo "⚠️ API health non disponible"
      - name: 🔍 Check metrics
        run: |
          curl -f http://localhost:8000/metrics || echo "⚠️ Metrics non disponible"
      - name: 🔍 Check doc
        run: |
          curl -f http://localhost:9000 || echo "⚠️ Documentation non disponible"

  # 🚀 Deploy to Production (main uniquement, protégé)
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🐳 Deploy to production
        run: |
          if [ -f "docker-compose.prod.yml" ]; then
            docker-compose -f docker-compose.prod.yml up -d || docker compose -f docker-compose.prod.yml up -d || echo "⚠️ Déploiement production échoué"
          else
            echo "⚠️ docker-compose.prod.yml non trouvé"
          fi
      - name: 🏥 Health Check (prod)
        run: |
          curl -f http://localhost:8000/health || echo "⚠️ API health non disponible"
          curl -f http://localhost:8000/metrics || echo "⚠️ Metrics non disponible"
      - name: 🧹 Clean up
        if: always()
        run: |
          if [ -f "docker-compose.prod.yml" ]; then
            docker-compose -f docker-compose.prod.yml down || docker compose -f docker-compose.prod.yml down || echo "⚠️ Nettoyage production échoué"
          fi
