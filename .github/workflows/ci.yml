name: 🚀 Arkalia-LUNA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"
  COVERAGE_MIN: 70

jobs:
  # 🔍 Linting et formatage
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧹 Clean generated files
        run: |
          find . -name "._*" -delete
          find . -name ".DS_Store" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: 🎨 Check code formatting
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: 🔍 Run linting
        run: |
          ruff check . || exit 1
          mypy modules/ --ignore-missing-imports || true

  # 🧪 Tests unitaires et d'intégration
  test:
    name: 🧪 Tests Unitaires & Intégration
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧹 Clean test artifacts
        run: |
          find . -name "._*" -delete
          find . -name ".DS_Store" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          rm -f test-results.xml coverage.xml .coverage
          rm -rf htmlcov/

      - name: 🧪 Run tests with coverage
        run: |
          pytest tests/ \
            --cov=modules \
            --cov=scripts \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=${{ env.COVERAGE_MIN }} \
            --junitxml=test-results.xml \
            -v \
            --tb=short \
            --ignore=modules/generative_ai/generated/ \
            --strict-markers

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/
            .coverage
            coverage.xml

  # 🔒 Tests de sécurité
  security:
    name: 🔒 Tests de Sécurité
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          pip install -r requirements.txt

      - name: 🔒 Run security tests
        run: |
          pytest tests/security/ -v --tb=short

      - name: 🔍 Run bandit security scan
        run: |
          bandit -r modules/ -f json -o bandit-report.json || true

      - name: 📋 Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  # 🚀 Tests de performance (nightly)
  performance:
    name: 🚀 Tests de Performance
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          pip install -r requirements.txt

      - name: 🚀 Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only

      - name: 📊 Generate performance report
        run: |
          python scripts/ark-performance-benchmark.py --report-only || echo "Performance report generation failed"

  # 🌀 Tests de chaos (nightly)
  chaos:
    name: 🌀 Tests de Chaos
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          pip install -r requirements.txt

      - name: 🌀 Run chaos tests
        run: |
          pytest tests/chaos/ -v --tb=short -m "not slow"

  # 📊 Rapport final
  report:
    name: 📊 Rapport Final
    runs-on: ubuntu-latest
    needs: [test, security, performance, chaos]
    if: always()
    steps:
      - name: 📋 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📊 Generate final report
        run: |
          echo "## 🚀 Arkalia-LUNA CI/CD Report" >> report.md
          echo "### ✅ Tests Status" >> report.md
          echo "- Unit & Integration: ${{ needs.test.result }}" >> report.md
          echo "- Security: ${{ needs.security.result }}" >> report.md
          echo "- Performance: ${{ needs.performance.result }}" >> report.md
          echo "- Chaos: ${{ needs.chaos.result }}" >> report.md
          echo "" >> report.md
          echo "### 📈 Coverage: ${{ env.COVERAGE_MIN }}% minimum" >> report.md

      - name: 📋 Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: report.md
