version: '3.8'

networks:
  arkalia_fixed_network:
    driver: bridge

volumes:
  arkalia_state_volume:
    driver: local
  arkalia_logs_volume:
    driver: local

services:
  # ═══════════════════════════════════════════════════════════════════
  # 🚀 ARKALIA API PRINCIPALE (FastAPI + Helloria)
  # ═══════════════════════════════════════════════════════════════════
  arkalia-api-fixed:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm as builder

        # Build dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential \
            curl \
            git \
            && rm -rf /var/lib/apt/lists/*

        # Create virtual environment
        RUN python -m venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        # Install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Runtime stage
        FROM python:3.11-slim-bookworm as runtime

        # Runtime dependencies only
        RUN apt-get update && apt-get install -y --no-install-recommends \
            curl \
            procps \
            && rm -rf /var/lib/apt/lists/* \
            && groupadd -r arkalia \
            && useradd -r -g arkalia -s /bin/false arkalia

        # Copy virtual environment
        COPY --from=builder /opt/venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        # Set working directory
        WORKDIR /app

        # Copy all modules and dependencies
        COPY modules/ modules/
        COPY helloria/ helloria/
        COPY config/ config/
        COPY scripts/ scripts/
        COPY state/ state/
        COPY requirements.txt .
        COPY pyproject.toml .

        # Create directories
        RUN mkdir -p logs state cache \
            && chown -R arkalia:arkalia /app

        # Security and performance
        USER arkalia
        ENV PYTHONUNBUFFERED=1
        ENV PYTHONPATH=/app:/app/modules

        HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
            CMD curl -f http://localhost:8000/health || exit 1

        EXPOSE 8000
        CMD ["uvicorn", "helloria.core:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]

    container_name: arkalia-api-fixed
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app:/app/modules
      - ARKALIA_ENV=production
    volumes:
      - arkalia_state_volume:/app/state
      - arkalia_logs_volume:/app/logs
    networks:
      - arkalia_fixed_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ═══════════════════════════════════════════════════════════════════
  # 🤖 ASSISTANTIA - Navigateur Contextuel IA
  # ═══════════════════════════════════════════════════════════════════
  assistantia-fixed:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm as builder

        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential curl git && rm -rf /var/lib/apt/lists/*

        RUN python -m venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        FROM python:3.11-slim-bookworm as runtime

        RUN apt-get update && apt-get install -y --no-install-recommends \
            curl procps && rm -rf /var/lib/apt/lists/* \
            && groupadd -r arkalia && useradd -r -g arkalia -s /bin/false arkalia

        COPY --from=builder /opt/venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        WORKDIR /app

        # Copy TOUS les modules pour éviter les imports croisés
        COPY modules/ modules/
        COPY config/ config/
        COPY scripts/ scripts/
        COPY state/ state/
        COPY requirements.txt .

        RUN mkdir -p logs state cache && chown -R arkalia:arkalia /app

        USER arkalia
        ENV PYTHONUNBUFFERED=1
        ENV PYTHONPATH=/app:/app/modules

        HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
            CMD curl -f http://localhost:8001/health || exit 1

        EXPOSE 8001
        CMD ["uvicorn", "modules.assistantia.core:app", "--host", "0.0.0.0", "--port", "8001"]

    container_name: assistantia-fixed
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app:/app/modules
      - OLLAMA_HOST=host.docker.internal:11434
    volumes:
      - arkalia_state_volume:/app/state
      - arkalia_logs_volume:/app/logs
    networks:
      - arkalia_fixed_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.3'

  # ═══════════════════════════════════════════════════════════════════
  # 🧠 REFLEXIA - Observateur Cognitif
  # ═══════════════════════════════════════════════════════════════════
  reflexia-fixed:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm as builder

        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential curl git && rm -rf /var/lib/apt/lists/*

        RUN python -m venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        FROM python:3.11-slim-bookworm as runtime

        RUN apt-get update && apt-get install -y --no-install-recommends \
            curl procps && rm -rf /var/lib/apt/lists/* \
            && groupadd -r arkalia && useradd -r -g arkalia -s /bin/false arkalia

        COPY --from=builder /opt/venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        WORKDIR /app

        # Copy ALL modules
        COPY modules/ modules/
        COPY config/ config/
        COPY scripts/ scripts/
        COPY state/ state/
        COPY run_reflexia.py .
        COPY requirements.txt .

        RUN mkdir -p logs state cache && chown -R arkalia:arkalia /app

        USER arkalia
        ENV PYTHONUNBUFFERED=1
        ENV PYTHONPATH=/app:/app/modules

        CMD ["python", "run_reflexia.py"]

    container_name: reflexia-fixed
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app:/app/modules
    volumes:
      - arkalia_state_volume:/app/state
      - arkalia_logs_volume:/app/logs
    networks:
      - arkalia_fixed_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.3'

  # ═══════════════════════════════════════════════════════════════════
  # ⚡ ZEROIA - Décideur Ultra-Rapide
  # ═══════════════════════════════════════════════════════════════════
  zeroia-fixed:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm as builder

        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential curl git && rm -rf /var/lib/apt/lists/*

        RUN python -m venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        FROM python:3.11-slim-bookworm as runtime

        RUN apt-get update && apt-get install -y --no-install-recommends \
            curl procps && rm -rf /var/lib/apt/lists/* \
            && groupadd -r arkalia && useradd -r -g arkalia -s /bin/false arkalia

        COPY --from=builder /opt/venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        WORKDIR /app

        # Copy ALL modules
        COPY modules/ modules/
        COPY config/ config/
        COPY scripts/ scripts/
        COPY state/ state/
        COPY requirements.txt .

        RUN mkdir -p logs state cache && chown -R arkalia:arkalia /app

        USER arkalia
        ENV PYTHONUNBUFFERED=1
        ENV PYTHONPATH=/app:/app/modules

        CMD ["python", "scripts/demo_orchestrator_enhanced.py", "--mode", "continuous"]

    container_name: zeroia-fixed
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app:/app/modules
    volumes:
      - arkalia_state_volume:/app/state
      - arkalia_logs_volume:/app/logs
    networks:
      - arkalia_fixed_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.3'

  # ═══════════════════════════════════════════════════════════════════
  # 🧠 SANDOZIA - Intelligence Croisée (FIXED)
  # ═══════════════════════════════════════════════════════════════════
  sandozia-fixed:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm as builder

        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential curl git && rm -rf /var/lib/apt/lists/*

        RUN python -m venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        FROM python:3.11-slim-bookworm as runtime

        RUN apt-get update && apt-get install -y --no-install-recommends \
            curl procps && rm -rf /var/lib/apt/lists/* \
            && groupadd -r arkalia && useradd -r -g arkalia -s /bin/false arkalia

        COPY --from=builder /opt/venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        WORKDIR /app

        # Copy ALL modules - Solution au problème d'imports croisés
        COPY modules/ modules/
        COPY config/ config/
        COPY scripts/ scripts/
        COPY state/ state/
        COPY requirements.txt .

        RUN mkdir -p logs state cache && chown -R arkalia:arkalia /app

        USER arkalia
        ENV PYTHONUNBUFFERED=1
        ENV PYTHONPATH=/app:/app/modules

        CMD ["python", "scripts/demo_sandozia.py", "--full-demo"]

    container_name: sandozia-fixed
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app:/app/modules
    volumes:
      - arkalia_state_volume:/app/state
      - arkalia_logs_volume:/app/logs
    networks:
      - arkalia_fixed_network
    depends_on:
      - reflexia-fixed
      - zeroia-fixed
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.3'

  # ═══════════════════════════════════════════════════════════════════
  # 🔄 COGNITIVE REACTOR - Réactions Automatiques (FIXED)
  # ═══════════════════════════════════════════════════════════════════
  cognitive-reactor-fixed:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm as builder

        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential curl git && rm -rf /var/lib/apt/lists/*

        RUN python -m venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        FROM python:3.11-slim-bookworm as runtime

        RUN apt-get update && apt-get install -y --no-install-recommends \
            curl procps && rm -rf /var/lib/apt/lists/* \
            && groupadd -r arkalia && useradd -r -g arkalia -s /bin/false arkalia

        COPY --from=builder /opt/venv /opt/venv
        ENV PATH="/opt/venv/bin:$PATH"

        WORKDIR /app

        # Copy ALL modules
        COPY modules/ modules/
        COPY config/ config/
        COPY scripts/ scripts/
        COPY state/ state/
        COPY requirements.txt .

        RUN mkdir -p logs state cache && chown -R arkalia:arkalia /app

        USER arkalia
        ENV PYTHONUNBUFFERED=1
        ENV PYTHONPATH=/app:/app/modules

        CMD ["python", "scripts/arkalia_enhanced_integration.py"]

    container_name: cognitive-reactor-fixed
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app:/app/modules
    volumes:
      - arkalia_state_volume:/app/state
      - arkalia_logs_volume:/app/logs
    networks:
      - arkalia_fixed_network
    depends_on:
      - sandozia-fixed
      - reflexia-fixed
      - zeroia-fixed
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
