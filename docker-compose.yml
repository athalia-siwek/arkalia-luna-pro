---
# üöÄ Arkalia Luna Pro ‚Äî Docker Compose Optimis√© v3.0
# Configuration haute performance avec s√©curit√© renforc√©e

x-arkalia-defaults: &arkalia-defaults
  build:
    context: .
  volumes:
    - ./logs:/app/logs
    - ./state:/app/state:rw
    - ./config:/app/config:ro
  working_dir: /app
  environment:
    - PYTHONUNBUFFERED=1
    - PYTHONDONTWRITEBYTECODE=1
  restart: unless-stopped
  networks:
    - arkalia_network
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  read_only: false # Chang√© pour permettre l'√©criture dans /app/logs

services:
  # üöÄ Helloria ‚Äî API centrale (FastAPI) Optimis√©e
  arkalia-api:
    <<: *arkalia-defaults
    container_name: arkalia-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT_API:-8000}:8000"
    command: python run_arkalia_api.py
    environment:
      - ARKALIA_ENV=development
      - ARKALIA_LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.5"

  # ü§ñ AssistantIA ‚Äî Interface IA conversationnelle v2.8.0
  arkalia-assistantia:
    <<: *arkalia-defaults
    container_name: arkalia-assistantia
    build:
      context: .
      dockerfile: docker/Dockerfile.assistantia
    image: arkalia-luna-assistantia:production
    ports:
      - "${PORT_ASSISTANTIA:-8001}:8001"
    command: >
      uvicorn modules.assistantia.core:app --host 0.0.0.0 --port 8001
        --workers 1 --access-log --log-level info
    environment:
      - ASSISTANTIA_ENV=production
      - ASSISTANTIA_LOG_LEVEL=INFO
      - OLLAMA_HOST=host.docker.internal
      - OLLAMA_PORT=11434
    depends_on:
      arkalia-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./state:/app/state
      - ./modules/assistantia/logs:/app/modules/assistantia/logs
    networks:
      - arkalia_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.5"

  # üîÅ ReflexIA ‚Äî Observateur cognitif r√©flexif Optimis√©
  reflexia:
    build:
      context: .
      dockerfile: docker/Dockerfile.reflexia
    container_name: arkalia-reflexia
    restart: unless-stopped
    ports:
      - "8002:8002"
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
    environment:
      - REFLEXIA_ENV=production
    networks:
      - arkalia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: ["uvicorn", "run_reflexia_api:app", "--host", "0.0.0.0", "--port", "8002"]

  # üß† Sandozia ‚Äî Intelligence Crois√©e Enterprise v2.6.0 Optimis√©e
  arkalia-sandozia:
    <<: *arkalia-defaults
    container_name: arkalia-sandozia
    build:
      context: .
      dockerfile: docker/Dockerfile.sandozia
    image: arkalia-luna-sandozia:optimized
    command: python -m modules.sandozia.core.sandozia_core --start
    environment:
      - SANDOZIA_ENV=development
      - SANDOZIA_MONITORING_ENABLED=true
      - SANDOZIA_LOG_LEVEL=INFO
      - SANDOZIA_ENHANCED_MODE=true
    depends_on:
      reflexia:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "from modules.sandozia.core.sandozia_core import SandoziaCore; print('OK')",
        ]
      interval: 45s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.5"
        reservations:
          memory: 512M
          cpus: "0.8"

  # üß† Cognitive Reactor ‚Äî Intelligence Avanc√©e v2.7.0 Production Ready
  cognitive:
    build:
      context: .
      dockerfile: docker/Dockerfile.cognitive-reactor
    container_name: arkalia-cognitive
    restart: unless-stopped
    ports:
      - "8003:8003"
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
    environment:
      - COGNITIVE_REACTOR_ENV=production
    networks:
      - arkalia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: ["uvicorn", "run_cognitive_api:app", "--host", "0.0.0.0", "--port", "8003"]

  # üöÄ Generative AI ‚Äî Intelligence G√©n√©rative Avanc√©e v2.8.0
  # generative-ai:
  #   <<: *arkalia-defaults
  #   container_name: generative-ai
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.generative-ai
  #   image: arkalia-luna-generative:production
  #   ports:
  #     - "${PORT_GENERATIVE_AI:-8003}:8001"
  #   command: --mode production --daemon --max-generations 100 --interval 120
  #   environment:
  #     - GENERATIVE_AI_ENV=production
  #     - GENERATIVE_AI_ENABLED=true
  #     - GENERATIVE_AI_MAX_GENERATIONS=100
  #     - GENERATIVE_AI_INTERVAL=120
  #     - GENERATIVE_LOG_LEVEL=INFO
  #   depends_on:
  #     cognitive-reactor:
  #       condition: service_healthy
  #     sandozia:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD", "python", "-c", "from modules.generative_ai.core import GenerativeAI; print('GenerativeAI OK')" ]
  #     interval: 90s
  #     timeout: 20s
  #     retries: 3
  #     start_period: 60s
  #   restart: unless-stopped
  #   volumes:
  #     - ./modules/generative_ai/state:/app/modules/generative_ai/state
  #     - ./modules/generative_ai/generated:/app/modules/generative_ai/generated
  #     - ./logs:/app/logs
  #     - ./state:/app/state
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 768M
  #         cpus: '1.2'
  #       reservations:
  #         memory: 384M
  #         cpus: '0.6'

networks:
  arkalia_network:
    driver: bridge
    name: arkalia_network
