# üöÄ Arkalia Luna Pro ‚Äî Docker Compose Optimis√© v3.0
# Configuration haute performance avec s√©curit√© renforc√©e

x-arkalia-defaults: &arkalia-defaults
  build:
    context: .
  volumes:
    - ./logs:/app/logs
    - ./state:/app/state:rw
    - ./config:/app/config:ro
  working_dir: /app
  environment:
    - PYTHONUNBUFFERED=1
    - PYTHONDONTWRITEBYTECODE=1
  restart: unless-stopped
  networks:
    - arkalia_network
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  read_only: false # Chang√© pour permettre l'√©criture dans /app/logs

services:

  # üöÄ Helloria ‚Äî API centrale (FastAPI) Optimis√©e
  arkalia-api:
    <<: *arkalia-defaults
    container_name: arkalia-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT_API:-8000}:8000"
    command: >
      uvicorn helloria.core:app --host 0.0.0.0 --port 8000
        --workers 2 --access-log --log-level info
        --reload --reload-dir helloria
        --reload-exclude logs/ --reload-exclude docs/
    environment:
      - ARKALIA_ENV=development
      - ARKALIA_LOG_LEVEL=INFO
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=3)" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # üß† AssistantIA ‚Äî Navigation contextuelle Optimis√©e
  assistantia:
    <<: *arkalia-defaults
    container_name: assistantia
    build:
      context: .
      dockerfile: Dockerfile.assistantia
    ports:
      - "${PORT_ASSISTANTIA:-8001}:8001"
    command: >
      uvicorn modules.assistantia.core:app --host 0.0.0.0 --port 8001
        --workers 1 --access-log --log-level info
    environment:
      - ASSISTANTIA_ENV=development
      - ASSISTANTIA_LOG_LEVEL=INFO
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=3)" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.8'
        reservations:
          memory: 192M
          cpus: '0.4'

  # üîÅ ReflexIA ‚Äî Observateur cognitif r√©flexif Optimis√©
  reflexia:
    <<: *arkalia-defaults
    container_name: reflexia
    build:
      context: .
      dockerfile: Dockerfile-reflexia
    command: python run_reflexia.py
    environment:
      - REFLEXIA_ENV=development
      - REFLEXIA_MONITORING_ENABLED=true
    depends_on:
      assistantia:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "from modules.reflexia.core import ReflexiaCore; core = ReflexiaCore(); print('OK')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.4'

  # ü§ñ ZeroIA ‚Äî D√©cisionneur autonome Enhanced v2.6.0 Optimis√©
  zeroia:
    <<: *arkalia-defaults
    container_name: zeroia
    build:
      context: .
      dockerfile: Dockerfile.zeroia
    image: arkalia-luna-zeroia:optimized
    command: python scripts/demo_orchestrator_enhanced.py --mode daemon
    environment:
      - ZEROIA_ENV=development
      - ZEROIA_HOLD_LOOP=true
      - ZEROIA_ENHANCED_MODE=true
      - ZEROIA_LOG_LEVEL=INFO
    depends_on:
      reflexia:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "from modules.zeroia.state.zeroia_state import ZeroiaState; state = ZeroiaState(); print('OK')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.2'
        reservations:
          memory: 384M
          cpus: '0.6'

  # üß† Sandozia ‚Äî Intelligence Crois√©e Enterprise v2.6.0 Optimis√©e
  sandozia:
    <<: *arkalia-defaults
    container_name: sandozia
    build:
      context: .
      dockerfile: Dockerfile.sandozia
    image: arkalia-luna-sandozia:optimized
    command: python scripts/demo_sandozia.py --daemon
    environment:
      - SANDOZIA_ENV=development
      - SANDOZIA_MONITORING_ENABLED=true
      - SANDOZIA_LOG_LEVEL=INFO
      - SANDOZIA_ENHANCED_MODE=true
    depends_on:
      zeroia:
        condition: service_healthy
      reflexia:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "from modules.sandozia.core.sandozia_core import SandoziaCore; print('OK')" ]
      interval: 45s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.5'
        reservations:
          memory: 512M
          cpus: '0.8'

  # üß† Cognitive Reactor ‚Äî Nouveau service pour les r√©actions automatiques
  cognitive-reactor:
    <<: *arkalia-defaults
    container_name: cognitive-reactor
    build:
      context: .
      dockerfile: Dockerfile.sandozia
    image: arkalia-luna-sandozia:optimized
    command: python scripts/arkalia_enhanced_integration.py --integrate-with-zeroia
    environment:
      - COGNITIVE_REACTOR_ENV=development
      - COGNITIVE_REACTOR_ENABLED=true
      - CHRONALIA_ENABLED=true
    depends_on:
      sandozia:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "from modules.sandozia.core.cognitive_reactor import CognitiveReactor; print('OK')" ]
      interval: 60s
      timeout: 15s
      retries: 2
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.6'
        reservations:
          memory: 192M
          cpus: '0.3'

networks:
  arkalia_network:
    driver: bridge
    name: arkalia_network
