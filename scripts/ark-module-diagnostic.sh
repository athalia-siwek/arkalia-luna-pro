#!/bin/bash

# üåï Arkalia-LUNA Module Diagnostic ‚Äî Ultra-Pro v3.0
# üìù Diagnostic complet des modules Arkalia-LUNA
# üë§ Author: Athalia
# üìÖ Version: 3.0.0

set -e

# Couleurs Arkalia
ARKALIA_BLUE="\033[38;5;111m"
ARKALIA_GOLD="\033[38;5;220m"
ARKALIA_PINK="\033[38;5;213m"
ARKALIA_GREEN="\033[38;5;82m"
ARKALIA_RED="\033[38;5;196m"
ARKALIA_CYAN="\033[38;5;87m"
RESET="\033[0m"

# Fonction d'affichage styl√©e
ark_echo() {
    local color=$1
    local emoji=$2
    local message=$3
    echo -e "${color}${emoji} ${message}${RESET}"
}

# Header Arkalia
ark_echo "$ARKALIA_GOLD" "üåï" "Arkalia-LUNA Module Diagnostic ‚Äî Ultra-Pro v3.0"
echo ""

# Modules attendus
expected_modules=(
    "arkalia_master"
    "assistantia"
    "cognitive_reactor"
    "crossmodule_validator"
    "error_recovery"
    "generative_ai"
    "helloria"
    "monitoring"
    "nyxalia"
    "reflexia"
    "sandozia"
    "security"
    "taskia"
    "utils_enhanced"
    "zeroia"
)

# V√©rification de la structure
ark_echo "$ARKALIA_BLUE" "üîç" "V√©rification de la structure des modules..."

if [[ ! -d "modules" ]]; then
    ark_echo "$ARKALIA_RED" "‚ùå" "Dossier modules non trouv√©"
    exit 1
fi

ark_echo "$ARKALIA_GREEN" "‚úÖ" "Dossier modules trouv√©"

# Compteurs
total_modules=${#expected_modules[@]}
found_modules=0
missing_modules=()
working_modules=0
broken_modules=0

echo ""

# V√©rification de chaque module
ark_echo "$ARKALIA_BLUE" "üìã" "V√©rification des modules individuels..."

for module in "${expected_modules[@]}"; do
    if [[ -d "modules/$module" ]]; then
        ark_echo "$ARKALIA_GREEN" "‚úÖ" "$module"
        ((found_modules++))
        
        # V√©rification des fichiers essentiels
        if [[ -f "modules/$module/__init__.py" ]]; then
            ark_echo "$ARKALIA_CYAN" "   üìÑ" "__init__.py pr√©sent"
        else
            ark_echo "$ARKALIA_RED" "   ‚ùå" "__init__.py manquant"
        fi
        
        if [[ -f "modules/$module/core.py" ]] || [[ -d "modules/$module/core" ]]; then
            ark_echo "$ARKALIA_CYAN" "   üß†" "Core pr√©sent"
            ((working_modules++))
        else
            ark_echo "$ARKALIA_RED" "   ‚ùå" "Core manquant"
            ((broken_modules++))
        fi
        
        # V√©rification des tests
        if [[ -d "tests/unit/$module" ]] || [[ -d "tests/integration/$module" ]]; then
            ark_echo "$ARKALIA_CYAN" "   üß™" "Tests pr√©sents"
        else
            ark_echo "$ARKALIA_RED" "   ‚ùå" "Tests manquants"
        fi
        
    else
        ark_echo "$ARKALIA_RED" "‚ùå" "$module (manquant)"
        missing_modules+=("$module")
    fi
    echo ""
done

# Rapport de diagnostic
ark_echo "$ARKALIA_GOLD" "üìä" "Rapport de diagnostic:"
echo "   ‚Ä¢ Total attendu: $total_modules modules"
echo "   ‚Ä¢ Modules trouv√©s: $found_modules"
echo "   ‚Ä¢ Modules manquants: $((total_modules - found_modules))"
echo "   ‚Ä¢ Modules fonctionnels: $working_modules"
echo "   ‚Ä¢ Modules cass√©s: $broken_modules"

echo ""

# Modules manquants
if [[ ${#missing_modules[@]} -gt 0 ]]; then
    ark_echo "$ARKALIA_RED" "‚ö†Ô∏è" "Modules manquants:"
    for module in "${missing_modules[@]}"; do
        echo "   ‚Ä¢ $module"
    done
    echo ""
fi

# V√©rification Python
ark_echo "$ARKALIA_BLUE" "üêç" "V√©rification de l'environnement Python..."

if command -v python &> /dev/null; then
    python_version=$(python --version 2>&1)
    ark_echo "$ARKALIA_GREEN" "‚úÖ" "Python: $python_version"
else
    ark_echo "$ARKALIA_RED" "‚ùå" "Python non trouv√©"
fi

# V√©rification du venv
if [[ -n "$VIRTUAL_ENV" ]]; then
    ark_echo "$ARKALIA_GREEN" "‚úÖ" "Venv activ√©: $VIRTUAL_ENV"
else
    ark_echo "$ARKALIA_RED" "‚ùå" "Venv non activ√©"
fi

# V√©rification des d√©pendances
ark_echo "$ARKALIA_BLUE" "üì¶" "V√©rification des d√©pendances..."

if command -v pip &> /dev/null; then
    pip_packages=$(pip list | wc -l)
    ark_echo "$ARKALIA_GREEN" "‚úÖ" "$pip_packages packages install√©s"
else
    ark_echo "$ARKALIA_RED" "‚ùå" "pip non trouv√©"
fi

echo ""

# Test d'import des modules
ark_echo "$ARKALIA_BLUE" "üß™" "Test d'import des modules..."

for module in "${expected_modules[@]}"; do
    if [[ -d "modules/$module" ]]; then
        if python -c "import modules.$module" 2>/dev/null; then
            ark_echo "$ARKALIA_GREEN" "‚úÖ" "Import $module r√©ussi"
        else
            ark_echo "$ARKALIA_RED" "‚ùå" "Import $module √©chou√©"
        fi
    fi
done

echo ""

# V√©rification des scripts
ark_echo "$ARKALIA_BLUE" "üîß" "V√©rification des scripts..."

scripts=(
    "ark-start.sh"
    "ark-fix-all.sh"
    "scripts/ark-vscode-reload.sh"
    "scripts/ark-install-extensions.sh"
    "scripts/ark-motivation.sh"
)

for script in "${scripts[@]}"; do
    if [[ -f "$script" ]]; then
        if [[ -x "$script" ]]; then
            ark_echo "$ARKALIA_GREEN" "‚úÖ" "$script (ex√©cutable)"
        else
            ark_echo "$ARKALIA_RED" "‚ùå" "$script (non ex√©cutable)"
        fi
    else
        ark_echo "$ARKALIA_RED" "‚ùå" "$script (manquant)"
    fi
done

echo ""

# Recommandations
ark_echo "$ARKALIA_PINK" "üí°" "Recommandations:"

if [[ $broken_modules -gt 0 ]]; then
    echo "   ‚Ä¢ Corrigez les modules cass√©s"
fi

if [[ ${#missing_modules[@]} -gt 0 ]]; then
    echo "   ‚Ä¢ Cr√©ez les modules manquants"
fi

if [[ -z "$VIRTUAL_ENV" ]]; then
    echo "   ‚Ä¢ Activez le venv: source /Volumes/T7/arkalia-luna-venv/bin/activate"
fi

echo "   ‚Ä¢ Ex√©cutez les tests: pytest tests/ -v"
echo "   ‚Ä¢ V√©rifiez la configuration: ./scripts/ark-vscode-reload.sh"

echo ""

# Message final
if [[ $broken_modules -eq 0 && ${#missing_modules[@]} -eq 0 ]]; then
    ark_echo "$ARKALIA_GOLD" "üéâ" "Tous les modules Arkalia-LUNA sont op√©rationnels !"
else
    ark_echo "$ARKALIA_RED" "‚ö†Ô∏è" "Des probl√®mes ont √©t√© d√©tect√©s dans les modules"
fi

echo ""
ark_echo "$ARKALIA_GREEN" "üöÄ" "Diagnostic termin√© !"
echo ""

# Motivation finale
if [[ -f "scripts/ark-motivation.sh" ]]; then
    ark_echo "$ARKALIA_GOLD" "üåô" "Boost de motivation..."
    ./scripts/ark-motivation.sh
fi

exit 0 