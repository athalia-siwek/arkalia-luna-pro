#!/bin/bash
# üîç Script de Validation Compl√®te des Workflows - Arkalia-LUNA Pro
# Valide tous les workflows GitHub Actions et les configurations

set -e

echo "üîç [VALIDATION COMPL√àTE] D√©marrage de la validation des workflows..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
errors=0
warnings=0

# Fonction de validation d'un workflow
validate_workflow() {
    local workflow=$1
    local description=$2

    echo -e "${BLUE}üîç Validation de $workflow ($description)...${NC}"

    if [ ! -f "$workflow" ]; then
        echo -e "${RED}‚ùå $workflow manquant${NC}"
        errors=$((errors + 1))
        return 1
    fi

    echo -e "${GREEN}‚úÖ $workflow trouv√©${NC}"

    # Validation syntaxe YAML
    if ! yamllint "$workflow" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $workflow : syntaxe YAML invalide${NC}"
        errors=$((errors + 1))
        return 1
    fi

    # Validation GitHub Actions avec actionlint si disponible
    if command -v actionlint > /dev/null 2>&1; then
        if ! actionlint "$workflow" > /dev/null 2>&1; then
            echo -e "${YELLOW}‚ö†Ô∏è $workflow : avertissements actionlint${NC}"
            warnings=$((warnings + 1))
        else
            echo -e "${GREEN}‚úÖ $workflow : validation actionlint OK${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è actionlint non disponible - validation basique uniquement${NC}"
    fi

    echo -e "${GREEN}‚úÖ $workflow syntaxe valide${NC}"
    return 0
}

# Fonction de validation des Dockerfiles
validate_dockerfiles() {
    echo -e "\n${BLUE}üîç Validation des Dockerfiles...${NC}"

    # Liste des Dockerfiles requis
    dockerfiles=(
        "Dockerfile.zeroia:ZeroIA - D√©cisionneur Autonome"
        "Dockerfile-reflexia:ReflexIA - Observateur Cognitif"
        "Dockerfile.sandozia:Sandozia - Intelligence Crois√©e"
        "Dockerfile.assistantia:AssistantIA - Assistant IA"
        "Dockerfile.cognitive-reactor:Cognitive Reactor - Intelligence Avanc√©e"
        "Dockerfile.generative-ai:Generative AI - G√©n√©ration IA"
        "Dockerfile.master:Arkalia Master - Orchestrateur Principal"
    )

    for dockerfile_info in "${dockerfiles[@]}"; do
        IFS=':' read -r dockerfile description <<< "$dockerfile_info"

        if [ ! -f "$dockerfile" ]; then
            echo -e "${RED}‚ùå $dockerfile manquant${NC}"
            errors=$((errors + 1))
        else
            echo -e "${GREEN}‚úÖ $dockerfile trouv√©${NC}"

            # Validation syntaxe basique
            if ! grep -q "FROM" "$dockerfile"; then
                echo -e "${RED}‚ùå $dockerfile : instruction FROM manquante${NC}"
                errors=$((errors + 1))
            fi
        fi
    done
}

# Fonction de validation docker-compose
validate_docker_compose() {
    echo -e "\n${BLUE}üîç Validation docker-compose.yml...${NC}"

    if [ ! -f "docker-compose.yml" ]; then
        echo -e "${RED}‚ùå docker-compose.yml manquant${NC}"
        errors=$((errors + 1))
    else
        echo -e "${GREEN}‚úÖ docker-compose.yml trouv√©${NC}"

        # Validation syntaxe docker-compose
        if ! docker compose config --quiet > /dev/null 2>&1; then
            echo -e "${RED}‚ùå docker-compose.yml syntaxe invalide${NC}"
            errors=$((errors + 1))
        else
            echo -e "${GREEN}‚úÖ docker-compose.yml syntaxe valide${NC}"
        fi
    fi
}

# Fonction de validation MkDocs
validate_mkdocs() {
    echo -e "\n${BLUE}üîç Validation MkDocs...${NC}"

    if [ ! -f "mkdocs.yml" ]; then
        echo -e "${RED}‚ùå mkdocs.yml manquant${NC}"
        errors=$((errors + 1))
    else
        echo -e "${GREEN}‚úÖ mkdocs.yml trouv√©${NC}"

        # Validation syntaxe MkDocs
        if command -v mkdocs > /dev/null 2>&1; then
            if ! mkdocs build --strict --verbose > /dev/null 2>&1; then
                echo -e "${RED}‚ùå mkdocs.yml invalide${NC}"
                errors=$((errors + 1))
            else
                echo -e "${GREEN}‚úÖ Configuration MkDocs valide${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è mkdocs non install√© - validation basique uniquement${NC}"
        fi
    fi
}

# Fonction de validation des scripts
validate_scripts() {
    echo -e "\n${BLUE}üîç Validation des scripts...${NC}"

    # Scripts critiques
    critical_scripts=(
        "scripts/validate-dockerfiles.sh"
        "scripts/ark-performance-benchmark.py"
        "ark-test-full.sh"
    )

    for script in "${critical_scripts[@]}"; do
        if [ ! -f "$script" ]; then
            echo -e "${RED}‚ùå $script manquant${NC}"
            errors=$((errors + 1))
        else
            echo -e "${GREEN}‚úÖ $script trouv√©${NC}"

            # V√©rifier les permissions d'ex√©cution
            if [ ! -x "$script" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è $script : permissions d'ex√©cution manquantes${NC}"
                chmod +x "$script"
                echo -e "${GREEN}‚úÖ Permissions corrig√©es pour $script${NC}"
            fi
        fi
    done
}

# Validation des workflows GitHub Actions
echo -e "${BLUE}üîç Validation des workflows GitHub Actions...${NC}"

workflows=(
    ".github/workflows/ci.yml:CI Principal"
    ".github/workflows/deploy.yml:D√©ploiement principal"
    ".github/workflows/performance-tests.yml:Tests de performance"
    ".github/workflows/docs.yml:Documentation"
    ".github/workflows/e2e.yml:Tests E2E"
)

for workflow_info in "${workflows[@]}"; do
    IFS=':' read -r workflow description <<< "$workflow_info"
    validate_workflow "$workflow" "$description"
done

# Validation des autres composants
validate_dockerfiles
validate_docker_compose
validate_mkdocs
validate_scripts

# R√©sum√© final
echo -e "\n${BLUE}üìä R√âSUM√â DE LA VALIDATION COMPL√àTE :${NC}"
echo -e "üîç Workflows GitHub Actions : ${#workflows[@]} v√©rifi√©s"
echo -e "üê≥ Dockerfiles : 7 v√©rifi√©s"
echo -e "üìö MkDocs : 1 v√©rifi√©"
echo -e "üìú Scripts : 3 v√©rifi√©s"

if [ $errors -eq 0 ] && [ $warnings -eq 0 ]; then
    echo -e "\n${GREEN}‚úÖ VALIDATION COMPL√àTE R√âUSSIE !${NC}"
    echo -e "üéØ Tous les composants sont valides et pr√™ts pour la CI/CD"
    exit 0
elif [ $errors -eq 0 ] && [ $warnings -gt 0 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è VALIDATION AVEC AVERTISSEMENTS${NC}"
    echo -e "‚ö†Ô∏è $warnings avertissement(s) d√©tect√©(s) mais aucun erreur critique"
    exit 0
else
    echo -e "\n${RED}‚ùå VALIDATION √âCHOU√âE${NC}"
    echo -e "‚ùå $errors erreur(s) critique(s) d√©tect√©e(s)"
    echo -e "‚ö†Ô∏è $warnings avertissement(s) d√©tect√©(s)"
    exit 1
fi
