version: '3.8'

# üöÄ [PRODUCTION] Zero Downtime - Roadmap S3-P0 Arkalia-LUNA
# Configuration haute disponibilit√© avec nginx reverse proxy

services:
  # üåê Nginx Reverse Proxy - Load Balancer
  nginx:
    image: nginx:alpine
    container_name: arkalia_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - arkalia_api_primary
      - arkalia_api_secondary
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # ü§ñ API Arkalia Primary (Instance principale)
  arkalia_api_primary:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arkalia_api_primary
    ports:
      - "8001:8000" # Port interne diff√©rent
    environment:
      - ARKALIA_ENV=production
      - ARKALIA_INSTANCE=primary
      - ARKALIA_DATABASE_URL=postgresql://arkalia:${DB_PASSWORD}@postgres_primary:5432/arkalia_prod
      - ARKALIA_REDIS_URL=redis://redis_cluster:6379/0
      - ARKALIA_LOG_LEVEL=INFO
      - ARKALIA_WORKERS=4
      - ARKALIA_MONITORING_ENABLED=true
    volumes:
      - ./modules:/app/modules:ro
      - ./config:/app/config:ro
      - ./logs/api_primary:/app/logs
      - ./state:/app/state
    depends_on:
      - postgres_primary
      - redis_cluster
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # ü§ñ API Arkalia Secondary (Instance de backup)
  arkalia_api_secondary:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arkalia_api_secondary
    ports:
      - "8002:8000" # Port interne diff√©rent
    environment:
      - ARKALIA_ENV=production
      - ARKALIA_INSTANCE=secondary
      - ARKALIA_DATABASE_URL=postgresql://arkalia:${DB_PASSWORD}@postgres_secondary:5432/arkalia_prod
      - ARKALIA_REDIS_URL=redis://redis_cluster:6379/1
      - ARKALIA_LOG_LEVEL=INFO
      - ARKALIA_WORKERS=2
      - ARKALIA_MONITORING_ENABLED=true
    volumes:
      - ./modules:/app/modules:ro
      - ./config:/app/config:ro
      - ./logs/api_secondary:/app/logs
      - ./state:/app/state
    depends_on:
      - postgres_secondary
      - redis_cluster
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'

  # üß† ZeroIA Primary
  zeroia_primary:
    build:
      context: .
      dockerfile: Dockerfile-zeroia
    container_name: zeroia_primary
    environment:
      - ZEROIA_INSTANCE=primary
      - ZEROIA_BACKUP_ENABLED=true
      - ZEROIA_SYNC_INTERVAL=30
    volumes:
      - ./modules/zeroia:/app/modules/zeroia
      - ./state:/app/state
      - ./logs/zeroia_primary:/app/logs
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # üß† ZeroIA Secondary (Standby)
  zeroia_secondary:
    build:
      context: .
      dockerfile: Dockerfile-zeroia
    container_name: zeroia_secondary
    environment:
      - ZEROIA_INSTANCE=secondary
      - ZEROIA_STANDBY_MODE=true
      - ZEROIA_SYNC_FROM=zeroia_primary
    volumes:
      - ./modules/zeroia:/app/modules/zeroia
      - ./state:/app/state
      - ./logs/zeroia_secondary:/app/logs
    depends_on:
      - zeroia_primary
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # üîÑ ReflexIA avec haute disponibilit√©
  reflexia_primary:
    build:
      context: .
      dockerfile: Dockerfile-reflexia
    container_name: reflexia_primary
    environment:
      - REFLEXIA_INSTANCE=primary
      - REFLEXIA_HA_ENABLED=true
    volumes:
      - ./modules/reflexia:/app/modules/reflexia
      - ./state:/app/state
      - ./logs/reflexia_primary:/app/logs
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.8'

  # üóÑÔ∏è PostgreSQL Primary
  postgres_primary:
    image: postgres:15-alpine
    container_name: postgres_primary
    environment:
      - POSTGRES_DB=arkalia_prod
      - POSTGRES_USER=arkalia
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=replica
      - POSTGRES_REPLICATION_PASSWORD=${REPLICA_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./infrastructure/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # üóÑÔ∏è PostgreSQL Secondary (Replica)
  postgres_secondary:
    image: postgres:15-alpine
    container_name: postgres_secondary
    environment:
      - POSTGRES_DB=arkalia_prod
      - POSTGRES_USER=arkalia
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGUSER=replica
      - POSTGRES_MASTER_SERVICE=postgres_primary
    volumes:
      - postgres_secondary_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/replica_setup.sh:/docker-entrypoint-initdb.d/replica_setup.sh:ro
    ports:
      - "5433:5432"
    depends_on:
      - postgres_primary
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # üî¥ Redis Cluster
  redis_cluster:
    image: redis:7-alpine
    container_name: redis_cluster
    command: redis-server --appendonly yes --cluster-enabled yes
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # üìä Monitoring Stack Production
  prometheus_prod:
    image: prom/prometheus:latest
    container_name: prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/monitoring/prometheus/alerting_rules.yml:/etc/prometheus/alerting_rules.yml:ro
      - prometheus_prod_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # üìà Grafana Production
  grafana_prod:
    image: grafana/grafana:latest
    container_name: grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus_prod
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # üö® AlertManager Production
  alertmanager_prod:
    image: prom/alertmanager:latest
    container_name: alertmanager_prod
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./infrastructure/monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_prod_data:/alertmanager
    ports:
      - "9093:9093"
    restart: unless-stopped
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # üîÑ Deployment Manager (Zero Downtime)
  deployment_manager:
    build:
      context: .
      dockerfile: Dockerfile.deployment
    container_name: deployment_manager
    environment:
      - DEPLOYMENT_MODE=production
      - NGINX_RELOAD_ENDPOINT=http://nginx/reload
      - HEALTH_CHECK_TIMEOUT=30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./scripts:/app/scripts:ro
      - ./logs/deployment:/app/logs
    restart: "no" # Manuel pour d√©ploiements
    networks:
      - arkalia_prod_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

volumes:
  postgres_primary_data:
    driver: local
  postgres_secondary_data:
    driver: local
  redis_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  alertmanager_prod_data:
    driver: local

networks:
  arkalia_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
